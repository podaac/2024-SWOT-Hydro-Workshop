[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The Data Access Workshop for NASA’s SWOT Satellite will take place on Tuesday, February 13th from 9:00-12:30.\nNote, hands-on exercises will be executed from a Jupyter Lab instance in 2i2c. Click here to deploy the instance and simultaneously clone this GitHub repository to follow along with the tutorials. Please pass along your GitHub Username to get access.",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "schedule.html#workshop-schedule",
    "href": "schedule.html#workshop-schedule",
    "title": "Schedule",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\n\nFebruary 13th, 2024\n\n\n\n\n\n\n\nTime, HST (UTC-10)\nEvent\n\n\n\n\n9:00 am\nWelcome / Ice Breaker\n\n\n9:15 am\nIntroduction to SWOT & PO.DAAC\n\n\n9:45 am\nEarthdata Search Walkthrough\n\n\n10:05 am\nBreak\n\n\n10:15 am\nData Access Tutorials: earthaccess, in-cloud access, science example\n\n\n11:05 am\nBreak\n\n\n11:20 am\nTools for Data Access: Subscriber/Downloader, Hydrocron Timeseries API, SWODLR raster on-demand\n\n\n11:50 am\nHydroweb.next Demo\n\n\n12:00 pm\nDiscussion & Feedback\n\n\n12:20 pm\nSummary & Closing",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "schedule.html#closing---close-out-your-jupyter-hub",
    "href": "schedule.html#closing---close-out-your-jupyter-hub",
    "title": "Schedule",
    "section": "Closing - Close out your Jupyter Hub!",
    "text": "Closing - Close out your Jupyter Hub!\n\nClose out your JupyterHub instance if you are finished for the day, following these instructions.\nYou will continue to have access to the 2i2c JupyterHub in AWS for two weeks following this Workshop. You may use that time on your own to continue work and learn more about migrating data access routines and science workflows to the cloud. This cloud compute environment is supported by the NASA Openscapes project.\n\n\nThank you!",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SWOT Data Access Workshop by NASA’s PO.DAAC",
    "section": "",
    "text": "Welcome to the 2024 SWOT Data Access Workshop hosted by PO.DAAC!\nThe workshop will take place in person at the AGU Chapman: Remote Sensing of the Water Cycle Conference on Tuesday, February 13, 2024 from 9am-12:30pm in Honolulu, HI.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "SWOT Data Access Workshop by NASA’s PO.DAAC",
    "section": "",
    "text": "Welcome to the 2024 SWOT Data Access Workshop hosted by PO.DAAC!\nThe workshop will take place in person at the AGU Chapman: Remote Sensing of the Water Cycle Conference on Tuesday, February 13, 2024 from 9am-12:30pm in Honolulu, HI.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "SWOT Data Access Workshop by NASA’s PO.DAAC",
    "section": "About",
    "text": "About\n\nWorkshop Goals\n\nProvide an inclusive place to learn about and experience working with SWOT’s Hydrology Data;\nProvide strategies and best practices for finding and accessing NASA Earthdata in the Cloud. Specifically, participants will learn how to access data from AWS S3 buckets and have a better understanding of the Python ecosystem used to analyze the data depending on size and data formats;\nBetter understand the needs of Earthdata data scientists by providing a post survey and engaging in discussions with workshop participants;\nPractice using popular open source tools and utilities.\n\n\n\nWorkshop Description\nThe Surface Water and Ocean Topography (SWOT) satellite, a joint NASA-CNES venture, provides unprecedented measurements of surface water extents and elevations for hydrologic science and applications. The observations are offered through a range of data products including river and lake vector data in shapefiles, and raster, pixel cloud, and pixel vector data in netCDF. The shapefile products will also contain estimates of river discharge and lake storage change. In this pre-meeting workshop, participants will be introduced to SWOT and the various ways to access and utilize its data products, including via cloud computing, local download, and data transformation tools. Participants will be able to utilize a provided cloud computing environment accessed via personal laptops, or their own laptop’s compute power to explore SWOT data using data recipes by PO.DAAC, NASA’s Physical Oceanography Data Active Archive Center. No prior cloud computing experience is necessary. We welcome all to come and see how SWOT data could augment existing workflows or initiate new, innovative science and applications! The data tutorials at the workshop will use Python, but no prior experience is needed.\n\n\nAdditional SWOT Resources\n\nPO.DAAC Cookbook: SWOT Chapter - additional tutorials & tips\nSWOT Community GitHub - more community contributions\nSWOT Product Description Documents - pdfs embedded in the table\nPO.DAAC SWOT mission page",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "SWOT Data Access Workshop by NASA’s PO.DAAC",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis Workshop and its content has been developed by the PO.DAAC team at NASA’s Jet Propulsion Laboratory, California Institute of Technology.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html",
    "href": "Tutorials/SWOTHR_Science_Application.html",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "This tutorial can only be run in an AWS cloud instance running in us-west-2: NASA Earthdata Cloud data in S3 can be directly accessed via earthaccess python library; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nThis code runs using SWOT Level 2 Data Products (Version 1.1).\nNotebook Authors: Arnaud Cerbelaud, Jeffrey Wade, NASA Jet Propulsion Laboratory - California Institute of Technology (Jan 2024)\n\n\n\n\n\nRetrieve SWOT hydrological attributes on river reaches within the AWS cloud (Cal/Val data). Query reaches by:\n\nRiver name\nSpatial bounding box\nDownstream tracing from reach id (e.g. headwater to outlet) for river longitudinal profiles\nUpstream tracing from reach id (e.g. outlet to full river network) for watershed analysis\n\nPlot a time series of WSE, width, slope data on the filtered data\nVisualize an interactive map of WSE, width, slope data on the filtered data\n\nLast updated: 2 Feb 2024\n\n\n\n\nimport glob\nimport os\nimport requests\nimport s3fs\nimport fiona\nimport netCDF4 as nc\nimport h5netcdf\nimport xarray as xr\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport hvplot.xarray\nimport earthaccess\nfrom earthaccess import Auth, DataCollections, DataGranules, Store\nfrom pathlib import Path\nimport zipfile\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthenticate your Earthdata Login (EDL) information using the earthaccess python package as follows:\n\nearthaccess.login() # Login with your EDL credentials if asked\n\nEnter your Earthdata Login username:  cerbelaud\nEnter your Earthdata password:  ········\n\n\n&lt;earthaccess.auth.Auth at 0x7f114ba7bd30&gt;\n\n\n\n\n\n\n\n\nOptional step: Get the .kmz file of SWOT passes/swaths (Version 1.1) and import it into Google Earth for visualization\nDetermine which pass number corresponds to the river/basin you want to look at! #### Search for multiple days of data\n\n\n# Enter pass number\npass_number    = \"009\"   # e.g. 009 for Connecticut in NA, 003 for Rhine in EU\n# Enter continent code\ncontinent_code = \"NA\"     # e.g. \"AF\", \"NA\", \"EU\", \"SI\", \"AS\", \"AU\", \"SA\", \"AR\", \"GR\"\n\n# Retrieves granule from the day we want, in this case by passing to `earthdata.search_data` function the data collection shortname and temporal bounds\nriver_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_RIVERSP_1.1', \n                                        temporal = ('2023-04-08 00:00:00', '2023-04-12 23:59:59'),\n                                        granule_name = \"*Reach*_\" + pass_number + \"_\" + continent_code + \"*\")\n\n# Create fiona session to read data\nfs_s3 = earthaccess.get_s3fs_session(results=river_results)\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\nGranules found: 5\n\n\n\n\n\n\n# Initialize list of shapefiles containing all dates\nSWOT_HR_shps = []\n\n# Loop through queried granules to stack all acquisition dates\nfor j in range(len(river_results)):\n    \n    # Get the link for each zip file\n    river_link = earthaccess.results.DataGranule.data_links(river_results[j], access='direct')[0]\n    \n    # We use the zip+ prefix so fiona knows that we are operating on a zip file\n    river_shp_url = f\"zip+{river_link}\"\n    \n    # Read shapefile\n    with fiona.Env(session=fiona_session):\n        SWOT_HR_shps.append(gpd.read_file(river_shp_url)) \n\n\n\n\n\n# Combine granules from all acquisition dates into one dataframe\nSWOT_HR_df = gpd.GeoDataFrame(pd.concat(SWOT_HR_shps, ignore_index=True))\n\n# Sort dataframe by reach_id and time\nSWOT_HR_df = SWOT_HR_df.sort_values(['reach_id', 'time'])\n\nSWOT_HR_df\n\n\n\n\n\n\n\n\nreach_id\ntime\ntime_tai\ntime_str\np_lat\np_lon\nriver_name\nwse\nwse_u\nwse_r_u\n...\np_wid_var\np_n_nodes\np_dist_out\np_length\np_maf\np_dam_id\np_n_ch_max\np_n_ch_mod\np_low_slp\ngeometry\n\n\n\n\n1958\n72270400231\n-1.000000e+12\n-1.000000e+12\nno_data\n56.794630\n-66.461122\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n1618.079\n53\n230079.472\n10630.774958\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-66.48682 56.83442, -66.48645 56.8...\n\n\n2641\n72270400231\n-1.000000e+12\n-1.000000e+12\nno_data\n56.794630\n-66.461122\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n1618.079\n53\n230079.472\n10630.774958\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-66.48682 56.83442, -66.48645 56.8...\n\n\n1959\n72270400241\n-1.000000e+12\n-1.000000e+12\nno_data\n56.744361\n-66.341905\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n4831.128\n53\n240728.430\n10648.958289\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.41602 56.75969, -66.41553 56.7...\n\n\n2642\n72270400241\n-1.000000e+12\n-1.000000e+12\nno_data\n56.744361\n-66.341905\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n4831.128\n53\n240728.430\n10648.958289\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.41602 56.75969, -66.41553 56.7...\n\n\n1960\n72270400251\n7.344991e+08\n7.344991e+08\n2023-04-11T03:31:02Z\n56.676087\n-66.219811\nno_data\n2.855340e+02\n1.008930e+00\n1.004910e+00\n...\n412.975\n58\n252286.769\n11558.339052\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.27812 56.71437, -66.27775 56.7...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n615\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n1283\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n1957\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n2640\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n3312\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n\n\n3313 rows × 127 columns\n\n\n\n\n\n\n\n\n\n\nprint('Available dates are:')\nprint(np.unique([i[:10] for i in SWOT_HR_df['time_str']]))\nprint('Available rivers are:')\nprint(np.unique([i for i in SWOT_HR_df['river_name']]))\n\nAvailable dates are:\n['2023-04-08' '2023-04-09' '2023-04-10' '2023-04-11' '2023-04-12'\n 'no_data']\nAvailable rivers are:\n['Allagash River' 'Androscoggin River' 'Big Black River' 'Canal de fuite'\n 'Carrabassett River' 'Concord River' 'Concord River; Sudbury River'\n 'Connecticut River' 'Connecticut River; Westfield River'\n 'Connecticut River; White River' 'Dead River'\n 'Dead River (Kennebec River)' 'Deerfield River' 'Farmington River'\n 'Housatonic River' 'Ikarut River' 'Kennebec River' 'Komaktorvik River'\n 'Magalloway River' 'Merrimack River' 'Moose River'\n 'North Branch Penobscot River' 'Passumsic River' 'Pemigewasset River'\n 'Penobscot River West Branch' 'Quinebaug River' 'Saco River'\n 'Saguenay River' 'Saint Francis River' 'Saint John River'\n 'Saint Lawrence River' 'Sandy River' 'Shetucket River' 'Sudbury River'\n 'Thames River' 'West River' 'White River' 'no_data']\n\n\n\n\n\nNote: Some rivers have multiple names, hence using the contains function\n\n# Enter river name\nriver = \"Connecticut River\"  # e.g. \"Rhine\", \"Connecticut River\"\n\n## Filter dataframe\nSWOT_HR_df_river = SWOT_HR_df[(SWOT_HR_df.river_name.str.contains(river))]\n\n# Plot geopandas dataframe with 'explore' by reach id\nSWOT_HR_df_river[['reach_id','river_name','geometry']].explore('reach_id', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\nlat_start = {\"Connecticut River\": 41.5,\n             \"Rhine\": 47.5\n            }\nlat_end   = {\"Connecticut River\": 45,\n             \"Rhine\": 51\n            }\nlon_start = {\"Connecticut River\": -74,\n             \"Rhine\": 7\n            }\nlon_end   = {\"Connecticut River\": -71,\n             \"Rhine\": 10\n            }\n\n## Filter dataframe\nSWOT_HR_df_box = SWOT_HR_df[(SWOT_HR_df.p_lat &gt; lat_start[river]) & (SWOT_HR_df.p_lat &lt; lat_end[river]) & (SWOT_HR_df.p_lon &gt; lon_start[river]) & (SWOT_HR_df.p_lon &lt; lon_end[river])]\n\n# Plot geopandas dataframe with 'explore' by river name\nSWOT_HR_df_box[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\nWARNING: This works as long as the data is exhaustive (no missing SWORD reaches)\n\n\nNote: rch_dn_dict[rch_id] gives a list of all the reaches directly downstream from rch_id\n\n# Format rch_id_dn for dictionary. Rch_id_dn allows for multiple downstream reaches to be stored\n# Also removes spaces in attribute field\nrch_id_dn = [[x.strip() for x in SWOT_HR_df.rch_id_dn[j].split(',')] for j in range(0,len(SWOT_HR_df.rch_id_dn))]\n\n# Filter upstream reach ids to remove 'no_data'\nrch_id_dn_filter = [[x for x in dn_id if x.isnumeric()] for dn_id in rch_id_dn]\n\n# Create lookup dictionary for river network topology: Downstream\nrch_dn_dict = {SWOT_HR_df.reach_id[i]: rch_id_dn_filter[i] for i in range(len(SWOT_HR_df))}\n\n\n\n\n\n# Enter reach_id from which we will trace downstream    (e.g. headwaters of the Connecticut River)\nrch_dn_st = {\"Connecticut River\": '73120000691',\n             \"Rhine\": '23267000651'\n            }\n\n# Initialize list to store downstream reaches, including starting reach\nrch_dn_list = [rch_dn_st[river]]\n# Retrieve first downstream id of starting reach and add to list\nrch_dn_next = rch_dn_dict[rch_dn_st[river]][0]\n\n# Trace next downstream reach until we hit the outlet (or here the last reach on file)\nwhile len(rch_dn_next) != 0:\n    # Add reach to list if value exists\n    if len(rch_dn_next) != 0:\n        rch_dn_list.append(rch_dn_next)\n    # Recursively retrieve first downstream id of next reach\n    # Catch error if reach isn't in downloaded data\n    try:\n        rch_dn_next = rch_dn_dict[rch_dn_next][0]\n    except:\n        break\n\n\n\n\n\n# Filter downloaded data by downstream traced reaches\nSWOT_dn_trace = SWOT_HR_df[SWOT_HR_df.reach_id.isin(rch_dn_list)]\n\n# Remove reaches from rch_dn_list that are not present in SWOT data\nrch_dn_list = [rch for rch in rch_dn_list if rch in SWOT_HR_df.reach_id.values]\n\nSWOT_dn_trace[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\nWARNING: This works as long as the data is exhaustive (no missing SWORD reaches)\n\n\nNote: rch_up_dict[rch_id] gives a list of all the reaches directly upstream from rch_id\n\n# Format rch_id_up for dictionary. Rch_id_up allows for multiple upstream reaches to be stored\n# Also removes spaces in attribute field\nrch_id_up = [[x.strip() for x in SWOT_HR_df.rch_id_up[j].split(',')] for j in range(0,len(SWOT_HR_df.rch_id_up))]\n\n# Filter upstream reach ids to remove 'no_data'\nrch_id_up_fil = [[x for x in ups_id if x.isnumeric()] for ups_id in rch_id_up]\n\n# Create lookup dictionary for river network topology: Upstream\nrch_up_dict = {SWOT_HR_df.reach_id[i]: rch_id_up_fil[i] for i in range(len(SWOT_HR_df))}\n\n\n\n\nThis adds a bit of complexity, as we need to keep track of multiple branches upstream of the starting reach.\n\n# Enter reach_id from which we will trace upstream    (e.g. outlet of the Connecticut River)\nrch_up_st = {\"Connecticut River\": '73120000013',\n             \"Rhine\": '23265000051'\n            }\n\n# Initialize list to store traced upstream reaches, including starting reach\nrch_up_list = [rch_up_st[river]]\n# Retrieve ids of reaches upstream of starting reach and add to list\nrch_up_next = rch_up_dict[rch_up_st[river]]\n# For upstream tracing, we need to set a list of next upstream ids to start while loop\nrch_next_id = rch_up_next\n\n# Loop until no more reaches to trace\nwhile len(rch_next_id) != 0:\n    # Initialize list to store next upstream ids\n    rch_next_id = []\n    # Loop through next upstream ids for given reach\n    for rch_up_sel in rch_up_next:\n        # Get values of existing upstream ids of rch_up_next reaches\n        # If reach isn't in SWOT data (usually ghost reaches), continue to next reach\n        try:\n            rch_next_id = rch_next_id + rch_up_dict[rch_up_sel]\n        except:\n            continue\n        # Append id to list\n        rch_up_list.append(rch_up_sel)\n    # If reaches exist, add to list for next cycle of tracing\n    if len(rch_next_id) != 0:\n        rch_up_next = rch_next_id\n\n\n\n\n\n# Filter downloaded data by upstream traced reaches\nSWOT_up_trace = SWOT_HR_df[SWOT_HR_df.reach_id.isin(rch_up_list)]\n\n# Remove reaches from rch_up_list that are not present in SWOT data\nrch_up_list = [rch for rch in rch_up_list if rch in SWOT_HR_df.reach_id.values]\n\nSWOT_up_trace[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\n\n# Retrieve all possible acquisition dates (keeping only YYYY-MM-DD)\ndates = np.unique([i[:10] for i in [x for x in SWOT_HR_df['time_str'] if x!='no_data']])\n\n# Create a new database for time series analysis with unique reach_ids\nSWOT_dn_trace_time = SWOT_dn_trace.set_index('reach_id').groupby(level=0) \\\n                                  .apply(lambda df: df.reset_index(drop=True)) \\\n                                  .unstack().sort_index(axis=1, level=1)\n\nSWOT_dn_trace_time.columns = ['{}_{}'.format(x[0],dates[x[1]]) for x in SWOT_dn_trace_time.columns]\n\n\n\n\n\n# Explore variables you could choose to plot\nfor var in [\"wse\",\"slope\",\"width\",\"len\"]:\n    print(SWOT_dn_trace.columns[SWOT_dn_trace.columns.str.contains(var)])\n\nIndex(['wse', 'wse_u', 'wse_r_u', 'wse_c', 'wse_c_u', 'area_wse', 'p_wse',\n       'p_wse_var'],\n      dtype='object')\nIndex(['slope', 'slope_u', 'slope_r_u', 'slope2', 'slope2_u', 'slope2_r_u'], dtype='object')\nIndex(['width', 'width_u', 'width_c', 'width_c_u', 'p_width'], dtype='object')\nIndex(['p_length'], dtype='object')\n\n\n\n# Enter variable of interest for plotting\nvarstr = \"wse\"\n\n\n# Find cumulative length on the longitudinal profile\nlength_list    = np.nan_to_num([SWOT_dn_trace.p_length[SWOT_dn_trace.reach_id == rch].mean()/1000 for rch in rch_dn_list])\ncumlength_list = np.cumsum(length_list)\n\n## Plot a longitudinal profile from the downstream tracing database\n\n## Plot a longitudinal profile from the downstream tracing database\nplt.figure(figsize=(12,8))\nfor t in dates:\n    \n    # Store the quantity of interest (wse, width etc.) at time t\n    value = SWOT_dn_trace_time.loc[rch_dn_list,varstr+'_'+t]\n    \n    # Remove set negative values (bad observations) to NaN and forward fill NaNs\n    value[value &lt; 0] = np.nan\n    value = value.ffill()\n    \n    # Plot the data\n    plt.plot(cumlength_list, value, label = varstr+'_'+t)\n    \nplt.xlabel('Downstream Distance (km)')\nplt.ylabel(varstr)\nplt.legend()\n\n\n\n\n\n\n\n\n\n\n\n\n# Choose a date\ndate = dates[0]\n\n\n#Set one column as the active geometry in the new database\nSWOT_dn_trace_time = SWOT_dn_trace_time.set_geometry(\"geometry_\"+date)\n\n#Set cleaner colorbar bounds for better visualization\nvmin = np.percentile([i for i in SWOT_dn_trace_time[varstr+'_'+date] if i&gt;0],5)\nvmax = np.percentile([i for i in SWOT_dn_trace_time[varstr+'_'+date] if i&gt;0],95)\n\n# Interactive map\nSWOT_dn_trace_time.explore(varstr+'_'+date,\n                           vmin = vmin,\n                           vmax = vmax,\n                           cmap = \"Blues\", #\"Blues\",\n                           control_scale = True,\n                           tooltip = varstr+'_'+dates[0],  # show \"varstr+'_'+dates[0]\" value in tooltip (on hover)\n                           popup = True,  # show all values in popup (on click)\n                           #tiles = \"CartoDB positron\",  # use \"CartoDB positron\" tiles\n                           style_kwds=dict(weight=10)\n                          )\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\n\n\n\nSWOT_up_trace_time = SWOT_up_trace.set_index('reach_id').groupby(level=0) \\\n                                  .apply(lambda df: df.reset_index(drop=True)) \\\n                                  .unstack().sort_index(axis=1, level=1)\n\nSWOT_up_trace_time.columns = ['{}_{}'.format(x[0],dates[x[1]]) for x in SWOT_up_trace_time.columns]\n\nSWOT_up_trace_time = SWOT_up_trace_time.set_geometry(\"geometry_\"+date)\n\n#Set cleaner colorbar bounds for better visualization\nvmin = np.percentile([i for i in SWOT_up_trace_time[varstr+'_'+date] if i&gt;0],5)\nvmax = np.percentile([i for i in SWOT_up_trace_time[varstr+'_'+date] if i&gt;0],95)\n\n# Interactive map\nSWOT_up_trace_time.explore(varstr+'_'+date,\n                           vmin = vmin,\n                           vmax = vmax,\n                           cmap = \"Blues\", #\"Blues\",\n                           control_scale = True,\n                           tooltip = varstr+'_'+dates[0],  # show \"varstr+'_'+dates[0]\" value in tooltip (on hover)\n                           popup = True,  # show all values in popup (on click)\n                           tiles = \"CartoDB positron\",  # use \"CartoDB positron\" tiles\n                           style_kwds=dict(weight=5)\n                          )\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\nNow you will also need the tile number (in addition to the pass number). You can find it on the .kmz file\n\n# Enter tile number\ntile_number = \"116F\"\n\n# Retrieve granules from all days to find the cycle corresponding to the desired date\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = \"*100m*_\" + pass_number + \"_\" + tile_number + \"*\")\n# here we filter by files with '100m' in the name, pass=009, scene = 116F (tile = 232L) for Connecticut\n                                                 # pass=003, scene = 120F (tile = 239R) for the Rhine\n\nGranules found: 15\n\n\n\n\n\nprint([i for i in raster_results])\n\n[Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 484, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-08T03:55:38.288Z', 'BeginningDateTime': '2023-04-08T03:55:18.398Z'}}\nSize(MB): 70.40732002258301\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_484_009_116F_20230408T035517_20230408T035538_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 485, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-09T03:46:16.448Z', 'BeginningDateTime': '2023-04-09T03:45:56.558Z'}}\nSize(MB): 68.41873073577881\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_485_009_116F_20230409T034556_20230409T034616_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 486, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-10T03:36:54.573Z', 'BeginningDateTime': '2023-04-10T03:36:34.684Z'}}\nSize(MB): 68.47044467926025\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_486_009_116F_20230410T033634_20230410T033655_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 487, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-11T03:27:32.662Z', 'BeginningDateTime': '2023-04-11T03:27:12.772Z'}}\nSize(MB): 69.02541446685791\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_487_009_116F_20230411T032712_20230411T032733_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 488, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-12T03:18:10.720Z', 'BeginningDateTime': '2023-04-12T03:17:50.831Z'}}\nSize(MB): 67.56003761291504\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_488_009_116F_20230412T031750_20230412T031811_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 489, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-13T03:08:48.751Z', 'BeginningDateTime': '2023-04-13T03:08:28.862Z'}}\nSize(MB): 68.72685241699219\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_489_009_116F_20230413T030828_20230413T030849_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 490, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-14T02:59:26.753Z', 'BeginningDateTime': '2023-04-14T02:59:06.866Z'}}\nSize(MB): 66.47898387908936\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_490_009_116F_20230414T025906_20230414T025927_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 491, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-15T02:50:04.726Z', 'BeginningDateTime': '2023-04-15T02:49:44.836Z'}}\nSize(MB): 67.29588985443115\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_491_009_116F_20230415T024944_20230415T025005_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 492, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-16T02:40:43.207Z', 'BeginningDateTime': '2023-04-16T02:40:22.244Z'}}\nSize(MB): 0.933258056640625\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_492_009_116F_20230416T024022_20230416T024043_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 493, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-17T02:31:21.112Z', 'BeginningDateTime': '2023-04-17T02:31:00.151Z'}}\nSize(MB): 0.9332094192504883\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_493_009_116F_20230417T023100_20230417T023121_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 494, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-18T02:21:58.990Z', 'BeginningDateTime': '2023-04-18T02:21:38.024Z'}}\nSize(MB): 0.9332304000854492\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_494_009_116F_20230418T022138_20230418T022158_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 495, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-19T02:12:36.279Z', 'BeginningDateTime': '2023-04-19T02:12:16.394Z'}}\nSize(MB): 63.773990631103516\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_495_009_116F_20230419T021215_20230419T021236_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 496, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-20T02:03:14.075Z', 'BeginningDateTime': '2023-04-20T02:02:54.187Z'}}\nSize(MB): 62.185853004455566\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_496_009_116F_20230420T020253_20230420T020314_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 497, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-21T01:53:51.831Z', 'BeginningDateTime': '2023-04-21T01:53:31.942Z'}}\nSize(MB): 61.36593437194824\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_497_009_116F_20230421T015331_20230421T015352_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 498, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-22T01:44:29.616Z', 'BeginningDateTime': '2023-04-22T01:44:09.731Z'}}\nSize(MB): 61.341376304626465\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_498_009_116F_20230422T014409_20230422T014430_PIB0_01.nc']]\n\n\n\n\n\n\n# Let's look at cycle 485, on the second day of calval\n# Enter cycle\ncycle = \"485\"\n\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = \"*100m*\" + cycle + \"_\" + pass_number + \"_\" + tile_number + \"*\")\n\n# here we filter by files with '100m' in the name, cycle=484, pass=009, scene = 116F for Connecticut\n                                                 # cycle=485, pass=003, scene = 120F for the Rhine\n\nGranules found: 1\n\n\n\n\n\n\nfs_s3 = earthaccess.get_s3fs_session(results=raster_results)\n\n# get link for file and open it\nraster_link = earthaccess.results.DataGranule.data_links(raster_results[0], access='direct')[0]\ns3_file_obj5 = fs_s3.open(raster_link, mode='rb')\n\n# Open data with xarray\nds_raster = xr.open_dataset(s3_file_obj5, engine='h5netcdf')\n\n\n\n\n\n# Plot the data with a filter on water_frac &gt; x, or sig0&gt;50\nds_raster.wse.where(ds_raster.water_frac &gt; 0.5).hvplot.image(y='y', x='x').opts(cmap='Blues', clim=(vmin,vmax), width=1000, height=750)",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#retrieving-swot-attributes-wse-width-slope-and-plotting-a-longitudinal-profile-along-a-river-or-over-a-basin",
    "href": "Tutorials/SWOTHR_Science_Application.html#retrieving-swot-attributes-wse-width-slope-and-plotting-a-longitudinal-profile-along-a-river-or-over-a-basin",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "This tutorial can only be run in an AWS cloud instance running in us-west-2: NASA Earthdata Cloud data in S3 can be directly accessed via earthaccess python library; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nThis code runs using SWOT Level 2 Data Products (Version 1.1).\nNotebook Authors: Arnaud Cerbelaud, Jeffrey Wade, NASA Jet Propulsion Laboratory - California Institute of Technology (Jan 2024)",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#learning-objectives",
    "href": "Tutorials/SWOTHR_Science_Application.html#learning-objectives",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "Retrieve SWOT hydrological attributes on river reaches within the AWS cloud (Cal/Val data). Query reaches by:\n\nRiver name\nSpatial bounding box\nDownstream tracing from reach id (e.g. headwater to outlet) for river longitudinal profiles\nUpstream tracing from reach id (e.g. outlet to full river network) for watershed analysis\n\nPlot a time series of WSE, width, slope data on the filtered data\nVisualize an interactive map of WSE, width, slope data on the filtered data\n\nLast updated: 2 Feb 2024",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#import-packages",
    "href": "Tutorials/SWOTHR_Science_Application.html#import-packages",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "import glob\nimport os\nimport requests\nimport s3fs\nimport fiona\nimport netCDF4 as nc\nimport h5netcdf\nimport xarray as xr\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport hvplot.xarray\nimport earthaccess\nfrom earthaccess import Auth, DataCollections, DataGranules, Store\nfrom pathlib import Path\nimport zipfile",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#authenticate",
    "href": "Tutorials/SWOTHR_Science_Application.html#authenticate",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "Authenticate your Earthdata Login (EDL) information using the earthaccess python package as follows:\n\nearthaccess.login() # Login with your EDL credentials if asked\n\nEnter your Earthdata Login username:  cerbelaud\nEnter your Earthdata password:  ········\n\n\n&lt;earthaccess.auth.Auth at 0x7f114ba7bd30&gt;",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#retrieve-swot-hydrological-attributes-on-river-reaches-within-the-aws-cloud-calval-data",
    "href": "Tutorials/SWOTHR_Science_Application.html#retrieve-swot-hydrological-attributes-on-river-reaches-within-the-aws-cloud-calval-data",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "Optional step: Get the .kmz file of SWOT passes/swaths (Version 1.1) and import it into Google Earth for visualization\nDetermine which pass number corresponds to the river/basin you want to look at! #### Search for multiple days of data\n\n\n# Enter pass number\npass_number    = \"009\"   # e.g. 009 for Connecticut in NA, 003 for Rhine in EU\n# Enter continent code\ncontinent_code = \"NA\"     # e.g. \"AF\", \"NA\", \"EU\", \"SI\", \"AS\", \"AU\", \"SA\", \"AR\", \"GR\"\n\n# Retrieves granule from the day we want, in this case by passing to `earthdata.search_data` function the data collection shortname and temporal bounds\nriver_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_RIVERSP_1.1', \n                                        temporal = ('2023-04-08 00:00:00', '2023-04-12 23:59:59'),\n                                        granule_name = \"*Reach*_\" + pass_number + \"_\" + continent_code + \"*\")\n\n# Create fiona session to read data\nfs_s3 = earthaccess.get_s3fs_session(results=river_results)\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\nGranules found: 5\n\n\n\n\n\n\n# Initialize list of shapefiles containing all dates\nSWOT_HR_shps = []\n\n# Loop through queried granules to stack all acquisition dates\nfor j in range(len(river_results)):\n    \n    # Get the link for each zip file\n    river_link = earthaccess.results.DataGranule.data_links(river_results[j], access='direct')[0]\n    \n    # We use the zip+ prefix so fiona knows that we are operating on a zip file\n    river_shp_url = f\"zip+{river_link}\"\n    \n    # Read shapefile\n    with fiona.Env(session=fiona_session):\n        SWOT_HR_shps.append(gpd.read_file(river_shp_url)) \n\n\n\n\n\n# Combine granules from all acquisition dates into one dataframe\nSWOT_HR_df = gpd.GeoDataFrame(pd.concat(SWOT_HR_shps, ignore_index=True))\n\n# Sort dataframe by reach_id and time\nSWOT_HR_df = SWOT_HR_df.sort_values(['reach_id', 'time'])\n\nSWOT_HR_df\n\n\n\n\n\n\n\n\nreach_id\ntime\ntime_tai\ntime_str\np_lat\np_lon\nriver_name\nwse\nwse_u\nwse_r_u\n...\np_wid_var\np_n_nodes\np_dist_out\np_length\np_maf\np_dam_id\np_n_ch_max\np_n_ch_mod\np_low_slp\ngeometry\n\n\n\n\n1958\n72270400231\n-1.000000e+12\n-1.000000e+12\nno_data\n56.794630\n-66.461122\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n1618.079\n53\n230079.472\n10630.774958\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-66.48682 56.83442, -66.48645 56.8...\n\n\n2641\n72270400231\n-1.000000e+12\n-1.000000e+12\nno_data\n56.794630\n-66.461122\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n1618.079\n53\n230079.472\n10630.774958\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-66.48682 56.83442, -66.48645 56.8...\n\n\n1959\n72270400241\n-1.000000e+12\n-1.000000e+12\nno_data\n56.744361\n-66.341905\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n4831.128\n53\n240728.430\n10648.958289\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.41602 56.75969, -66.41553 56.7...\n\n\n2642\n72270400241\n-1.000000e+12\n-1.000000e+12\nno_data\n56.744361\n-66.341905\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n4831.128\n53\n240728.430\n10648.958289\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.41602 56.75969, -66.41553 56.7...\n\n\n1960\n72270400251\n7.344991e+08\n7.344991e+08\n2023-04-11T03:31:02Z\n56.676087\n-66.219811\nno_data\n2.855340e+02\n1.008930e+00\n1.004910e+00\n...\n412.975\n58\n252286.769\n11558.339052\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-66.27812 56.71437, -66.27775 56.7...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n615\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n1283\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n1957\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n2640\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n3312\n73130000061\n-1.000000e+12\n-1.000000e+12\nno_data\n41.424945\n-73.230960\nHousatonic River\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n10469.706\n82\n47161.191\n16303.793847\n-1.000000e+12\n0\n2\n1\n0\nLINESTRING (-73.17436 41.38295, -73.17465 41.3...\n\n\n\n\n3313 rows × 127 columns",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#exploring-the-dataset",
    "href": "Tutorials/SWOTHR_Science_Application.html#exploring-the-dataset",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "print('Available dates are:')\nprint(np.unique([i[:10] for i in SWOT_HR_df['time_str']]))\nprint('Available rivers are:')\nprint(np.unique([i for i in SWOT_HR_df['river_name']]))\n\nAvailable dates are:\n['2023-04-08' '2023-04-09' '2023-04-10' '2023-04-11' '2023-04-12'\n 'no_data']\nAvailable rivers are:\n['Allagash River' 'Androscoggin River' 'Big Black River' 'Canal de fuite'\n 'Carrabassett River' 'Concord River' 'Concord River; Sudbury River'\n 'Connecticut River' 'Connecticut River; Westfield River'\n 'Connecticut River; White River' 'Dead River'\n 'Dead River (Kennebec River)' 'Deerfield River' 'Farmington River'\n 'Housatonic River' 'Ikarut River' 'Kennebec River' 'Komaktorvik River'\n 'Magalloway River' 'Merrimack River' 'Moose River'\n 'North Branch Penobscot River' 'Passumsic River' 'Pemigewasset River'\n 'Penobscot River West Branch' 'Quinebaug River' 'Saco River'\n 'Saguenay River' 'Saint Francis River' 'Saint John River'\n 'Saint Lawrence River' 'Sandy River' 'Shetucket River' 'Sudbury River'\n 'Thames River' 'West River' 'White River' 'no_data']\n\n\n\n\n\nNote: Some rivers have multiple names, hence using the contains function\n\n# Enter river name\nriver = \"Connecticut River\"  # e.g. \"Rhine\", \"Connecticut River\"\n\n## Filter dataframe\nSWOT_HR_df_river = SWOT_HR_df[(SWOT_HR_df.river_name.str.contains(river))]\n\n# Plot geopandas dataframe with 'explore' by reach id\nSWOT_HR_df_river[['reach_id','river_name','geometry']].explore('reach_id', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\n\nlat_start = {\"Connecticut River\": 41.5,\n             \"Rhine\": 47.5\n            }\nlat_end   = {\"Connecticut River\": 45,\n             \"Rhine\": 51\n            }\nlon_start = {\"Connecticut River\": -74,\n             \"Rhine\": 7\n            }\nlon_end   = {\"Connecticut River\": -71,\n             \"Rhine\": 10\n            }\n\n## Filter dataframe\nSWOT_HR_df_box = SWOT_HR_df[(SWOT_HR_df.p_lat &gt; lat_start[river]) & (SWOT_HR_df.p_lat &lt; lat_end[river]) & (SWOT_HR_df.p_lon &gt; lon_start[river]) & (SWOT_HR_df.p_lon &lt; lon_end[river])]\n\n# Plot geopandas dataframe with 'explore' by river name\nSWOT_HR_df_box[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#river-longitudinal-profile-trace-reaches-downstream-of-given-starting-reach-using-rch_id_dn-field",
    "href": "Tutorials/SWOTHR_Science_Application.html#river-longitudinal-profile-trace-reaches-downstream-of-given-starting-reach-using-rch_id_dn-field",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "WARNING: This works as long as the data is exhaustive (no missing SWORD reaches)\n\n\nNote: rch_dn_dict[rch_id] gives a list of all the reaches directly downstream from rch_id\n\n# Format rch_id_dn for dictionary. Rch_id_dn allows for multiple downstream reaches to be stored\n# Also removes spaces in attribute field\nrch_id_dn = [[x.strip() for x in SWOT_HR_df.rch_id_dn[j].split(',')] for j in range(0,len(SWOT_HR_df.rch_id_dn))]\n\n# Filter upstream reach ids to remove 'no_data'\nrch_id_dn_filter = [[x for x in dn_id if x.isnumeric()] for dn_id in rch_id_dn]\n\n# Create lookup dictionary for river network topology: Downstream\nrch_dn_dict = {SWOT_HR_df.reach_id[i]: rch_id_dn_filter[i] for i in range(len(SWOT_HR_df))}\n\n\n\n\n\n# Enter reach_id from which we will trace downstream    (e.g. headwaters of the Connecticut River)\nrch_dn_st = {\"Connecticut River\": '73120000691',\n             \"Rhine\": '23267000651'\n            }\n\n# Initialize list to store downstream reaches, including starting reach\nrch_dn_list = [rch_dn_st[river]]\n# Retrieve first downstream id of starting reach and add to list\nrch_dn_next = rch_dn_dict[rch_dn_st[river]][0]\n\n# Trace next downstream reach until we hit the outlet (or here the last reach on file)\nwhile len(rch_dn_next) != 0:\n    # Add reach to list if value exists\n    if len(rch_dn_next) != 0:\n        rch_dn_list.append(rch_dn_next)\n    # Recursively retrieve first downstream id of next reach\n    # Catch error if reach isn't in downloaded data\n    try:\n        rch_dn_next = rch_dn_dict[rch_dn_next][0]\n    except:\n        break\n\n\n\n\n\n# Filter downloaded data by downstream traced reaches\nSWOT_dn_trace = SWOT_HR_df[SWOT_HR_df.reach_id.isin(rch_dn_list)]\n\n# Remove reaches from rch_dn_list that are not present in SWOT data\nrch_dn_list = [rch for rch in rch_dn_list if rch in SWOT_HR_df.reach_id.values]\n\nSWOT_dn_trace[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#watershed-analysis-trace-reaches-upstream-of-starting-reach-using-rch_id_up-field",
    "href": "Tutorials/SWOTHR_Science_Application.html#watershed-analysis-trace-reaches-upstream-of-starting-reach-using-rch_id_up-field",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "WARNING: This works as long as the data is exhaustive (no missing SWORD reaches)\n\n\nNote: rch_up_dict[rch_id] gives a list of all the reaches directly upstream from rch_id\n\n# Format rch_id_up for dictionary. Rch_id_up allows for multiple upstream reaches to be stored\n# Also removes spaces in attribute field\nrch_id_up = [[x.strip() for x in SWOT_HR_df.rch_id_up[j].split(',')] for j in range(0,len(SWOT_HR_df.rch_id_up))]\n\n# Filter upstream reach ids to remove 'no_data'\nrch_id_up_fil = [[x for x in ups_id if x.isnumeric()] for ups_id in rch_id_up]\n\n# Create lookup dictionary for river network topology: Upstream\nrch_up_dict = {SWOT_HR_df.reach_id[i]: rch_id_up_fil[i] for i in range(len(SWOT_HR_df))}\n\n\n\n\nThis adds a bit of complexity, as we need to keep track of multiple branches upstream of the starting reach.\n\n# Enter reach_id from which we will trace upstream    (e.g. outlet of the Connecticut River)\nrch_up_st = {\"Connecticut River\": '73120000013',\n             \"Rhine\": '23265000051'\n            }\n\n# Initialize list to store traced upstream reaches, including starting reach\nrch_up_list = [rch_up_st[river]]\n# Retrieve ids of reaches upstream of starting reach and add to list\nrch_up_next = rch_up_dict[rch_up_st[river]]\n# For upstream tracing, we need to set a list of next upstream ids to start while loop\nrch_next_id = rch_up_next\n\n# Loop until no more reaches to trace\nwhile len(rch_next_id) != 0:\n    # Initialize list to store next upstream ids\n    rch_next_id = []\n    # Loop through next upstream ids for given reach\n    for rch_up_sel in rch_up_next:\n        # Get values of existing upstream ids of rch_up_next reaches\n        # If reach isn't in SWOT data (usually ghost reaches), continue to next reach\n        try:\n            rch_next_id = rch_next_id + rch_up_dict[rch_up_sel]\n        except:\n            continue\n        # Append id to list\n        rch_up_list.append(rch_up_sel)\n    # If reaches exist, add to list for next cycle of tracing\n    if len(rch_next_id) != 0:\n        rch_up_next = rch_next_id\n\n\n\n\n\n# Filter downloaded data by upstream traced reaches\nSWOT_up_trace = SWOT_HR_df[SWOT_HR_df.reach_id.isin(rch_up_list)]\n\n# Remove reaches from rch_up_list that are not present in SWOT data\nrch_up_list = [rch for rch in rch_up_list if rch in SWOT_HR_df.reach_id.values]\n\nSWOT_up_trace[['reach_id','river_name','geometry']].explore('river_name', style_kwds=dict(weight=6))\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#visualize-and-plot-a-time-series-of-wsewidthslope-longitudinal-profiles",
    "href": "Tutorials/SWOTHR_Science_Application.html#visualize-and-plot-a-time-series-of-wsewidthslope-longitudinal-profiles",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "# Retrieve all possible acquisition dates (keeping only YYYY-MM-DD)\ndates = np.unique([i[:10] for i in [x for x in SWOT_HR_df['time_str'] if x!='no_data']])\n\n# Create a new database for time series analysis with unique reach_ids\nSWOT_dn_trace_time = SWOT_dn_trace.set_index('reach_id').groupby(level=0) \\\n                                  .apply(lambda df: df.reset_index(drop=True)) \\\n                                  .unstack().sort_index(axis=1, level=1)\n\nSWOT_dn_trace_time.columns = ['{}_{}'.format(x[0],dates[x[1]]) for x in SWOT_dn_trace_time.columns]\n\n\n\n\n\n# Explore variables you could choose to plot\nfor var in [\"wse\",\"slope\",\"width\",\"len\"]:\n    print(SWOT_dn_trace.columns[SWOT_dn_trace.columns.str.contains(var)])\n\nIndex(['wse', 'wse_u', 'wse_r_u', 'wse_c', 'wse_c_u', 'area_wse', 'p_wse',\n       'p_wse_var'],\n      dtype='object')\nIndex(['slope', 'slope_u', 'slope_r_u', 'slope2', 'slope2_u', 'slope2_r_u'], dtype='object')\nIndex(['width', 'width_u', 'width_c', 'width_c_u', 'p_width'], dtype='object')\nIndex(['p_length'], dtype='object')\n\n\n\n# Enter variable of interest for plotting\nvarstr = \"wse\"\n\n\n# Find cumulative length on the longitudinal profile\nlength_list    = np.nan_to_num([SWOT_dn_trace.p_length[SWOT_dn_trace.reach_id == rch].mean()/1000 for rch in rch_dn_list])\ncumlength_list = np.cumsum(length_list)\n\n## Plot a longitudinal profile from the downstream tracing database\n\n## Plot a longitudinal profile from the downstream tracing database\nplt.figure(figsize=(12,8))\nfor t in dates:\n    \n    # Store the quantity of interest (wse, width etc.) at time t\n    value = SWOT_dn_trace_time.loc[rch_dn_list,varstr+'_'+t]\n    \n    # Remove set negative values (bad observations) to NaN and forward fill NaNs\n    value[value &lt; 0] = np.nan\n    value = value.ffill()\n    \n    # Plot the data\n    plt.plot(cumlength_list, value, label = varstr+'_'+t)\n    \nplt.xlabel('Downstream Distance (km)')\nplt.ylabel(varstr)\nplt.legend()\n\n\n\n\n\n\n\n\n\n\n\n\n# Choose a date\ndate = dates[0]\n\n\n#Set one column as the active geometry in the new database\nSWOT_dn_trace_time = SWOT_dn_trace_time.set_geometry(\"geometry_\"+date)\n\n#Set cleaner colorbar bounds for better visualization\nvmin = np.percentile([i for i in SWOT_dn_trace_time[varstr+'_'+date] if i&gt;0],5)\nvmax = np.percentile([i for i in SWOT_dn_trace_time[varstr+'_'+date] if i&gt;0],95)\n\n# Interactive map\nSWOT_dn_trace_time.explore(varstr+'_'+date,\n                           vmin = vmin,\n                           vmax = vmax,\n                           cmap = \"Blues\", #\"Blues\",\n                           control_scale = True,\n                           tooltip = varstr+'_'+dates[0],  # show \"varstr+'_'+dates[0]\" value in tooltip (on hover)\n                           popup = True,  # show all values in popup (on click)\n                           #tiles = \"CartoDB positron\",  # use \"CartoDB positron\" tiles\n                           style_kwds=dict(weight=10)\n                          )\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_Science_Application.html#supplemental",
    "href": "Tutorials/SWOTHR_Science_Application.html#supplemental",
    "title": "SWOT Hydrology Science Application Tutorial on the Cloud",
    "section": "",
    "text": "SWOT_up_trace_time = SWOT_up_trace.set_index('reach_id').groupby(level=0) \\\n                                  .apply(lambda df: df.reset_index(drop=True)) \\\n                                  .unstack().sort_index(axis=1, level=1)\n\nSWOT_up_trace_time.columns = ['{}_{}'.format(x[0],dates[x[1]]) for x in SWOT_up_trace_time.columns]\n\nSWOT_up_trace_time = SWOT_up_trace_time.set_geometry(\"geometry_\"+date)\n\n#Set cleaner colorbar bounds for better visualization\nvmin = np.percentile([i for i in SWOT_up_trace_time[varstr+'_'+date] if i&gt;0],5)\nvmax = np.percentile([i for i in SWOT_up_trace_time[varstr+'_'+date] if i&gt;0],95)\n\n# Interactive map\nSWOT_up_trace_time.explore(varstr+'_'+date,\n                           vmin = vmin,\n                           vmax = vmax,\n                           cmap = \"Blues\", #\"Blues\",\n                           control_scale = True,\n                           tooltip = varstr+'_'+dates[0],  # show \"varstr+'_'+dates[0]\" value in tooltip (on hover)\n                           popup = True,  # show all values in popup (on click)\n                           tiles = \"CartoDB positron\",  # use \"CartoDB positron\" tiles\n                           style_kwds=dict(weight=5)\n                          )\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\nNow you will also need the tile number (in addition to the pass number). You can find it on the .kmz file\n\n# Enter tile number\ntile_number = \"116F\"\n\n# Retrieve granules from all days to find the cycle corresponding to the desired date\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = \"*100m*_\" + pass_number + \"_\" + tile_number + \"*\")\n# here we filter by files with '100m' in the name, pass=009, scene = 116F (tile = 232L) for Connecticut\n                                                 # pass=003, scene = 120F (tile = 239R) for the Rhine\n\nGranules found: 15\n\n\n\n\n\nprint([i for i in raster_results])\n\n[Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 484, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-08T03:55:38.288Z', 'BeginningDateTime': '2023-04-08T03:55:18.398Z'}}\nSize(MB): 70.40732002258301\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_484_009_116F_20230408T035517_20230408T035538_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 485, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-09T03:46:16.448Z', 'BeginningDateTime': '2023-04-09T03:45:56.558Z'}}\nSize(MB): 68.41873073577881\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_485_009_116F_20230409T034556_20230409T034616_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 486, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-10T03:36:54.573Z', 'BeginningDateTime': '2023-04-10T03:36:34.684Z'}}\nSize(MB): 68.47044467926025\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_486_009_116F_20230410T033634_20230410T033655_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 487, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-11T03:27:32.662Z', 'BeginningDateTime': '2023-04-11T03:27:12.772Z'}}\nSize(MB): 69.02541446685791\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_487_009_116F_20230411T032712_20230411T032733_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 488, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-12T03:18:10.720Z', 'BeginningDateTime': '2023-04-12T03:17:50.831Z'}}\nSize(MB): 67.56003761291504\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_488_009_116F_20230412T031750_20230412T031811_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 489, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-13T03:08:48.751Z', 'BeginningDateTime': '2023-04-13T03:08:28.862Z'}}\nSize(MB): 68.72685241699219\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_489_009_116F_20230413T030828_20230413T030849_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.4, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 490, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-14T02:59:26.753Z', 'BeginningDateTime': '2023-04-14T02:59:06.866Z'}}\nSize(MB): 66.47898387908936\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_490_009_116F_20230414T025906_20230414T025927_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 491, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-15T02:50:04.726Z', 'BeginningDateTime': '2023-04-15T02:49:44.836Z'}}\nSize(MB): 67.29588985443115\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_491_009_116F_20230415T024944_20230415T025005_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 492, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-16T02:40:43.207Z', 'BeginningDateTime': '2023-04-16T02:40:22.244Z'}}\nSize(MB): 0.933258056640625\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_492_009_116F_20230416T024022_20230416T024043_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 493, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-17T02:31:21.112Z', 'BeginningDateTime': '2023-04-17T02:31:00.151Z'}}\nSize(MB): 0.9332094192504883\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_493_009_116F_20230417T023100_20230417T023121_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 494, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-18T02:21:58.990Z', 'BeginningDateTime': '2023-04-18T02:21:38.024Z'}}\nSize(MB): 0.9332304000854492\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_494_009_116F_20230418T022138_20230418T022158_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 495, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-19T02:12:36.279Z', 'BeginningDateTime': '2023-04-19T02:12:16.394Z'}}\nSize(MB): 63.773990631103516\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_495_009_116F_20230419T021215_20230419T021236_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 496, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-20T02:03:14.075Z', 'BeginningDateTime': '2023-04-20T02:02:54.187Z'}}\nSize(MB): 62.185853004455566\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_496_009_116F_20230420T020253_20230420T020314_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 497, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-21T01:53:51.831Z', 'BeginningDateTime': '2023-04-21T01:53:31.942Z'}}\nSize(MB): 61.36593437194824\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_497_009_116F_20230421T015331_20230421T015352_PIB0_01.nc'], Collection: {'Version': '1.1', 'ShortName': 'SWOT_L2_HR_Raster_1.1'}\nSpatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'StartLatitude': -77.66, 'EndLatitude': 77.66, 'AscendingCrossing': -80.41, 'StartDirection': 'A', 'EndDirection': 'A'}, 'Track': {'Cycle': 498, 'Passes': [{'Pass': 9, 'Tiles': ['230L', '231L', '232L', '233L', '230R', '231R', '232R', '233R']}]}}}\nTemporal coverage: {'RangeDateTime': {'EndingDateTime': '2023-04-22T01:44:29.616Z', 'BeginningDateTime': '2023-04-22T01:44:09.731Z'}}\nSize(MB): 61.341376304626465\nData: ['https://archive.swot.podaac.earthdata.nasa.gov/podaac-swot-ops-cumulus-protected/SWOT_L2_HR_Raster_1.1/SWOT_L2_HR_Raster_100m_UTM19T_N_x_x_x_498_009_116F_20230422T014409_20230422T014430_PIB0_01.nc']]\n\n\n\n\n\n\n# Let's look at cycle 485, on the second day of calval\n# Enter cycle\ncycle = \"485\"\n\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = \"*100m*\" + cycle + \"_\" + pass_number + \"_\" + tile_number + \"*\")\n\n# here we filter by files with '100m' in the name, cycle=484, pass=009, scene = 116F for Connecticut\n                                                 # cycle=485, pass=003, scene = 120F for the Rhine\n\nGranules found: 1\n\n\n\n\n\n\nfs_s3 = earthaccess.get_s3fs_session(results=raster_results)\n\n# get link for file and open it\nraster_link = earthaccess.results.DataGranule.data_links(raster_results[0], access='direct')[0]\ns3_file_obj5 = fs_s3.open(raster_link, mode='rb')\n\n# Open data with xarray\nds_raster = xr.open_dataset(s3_file_obj5, engine='h5netcdf')\n\n\n\n\n\n# Plot the data with a filter on water_frac &gt; x, or sig0&gt;50\nds_raster.wse.where(ds_raster.water_frac &gt; 0.5).hvplot.image(y='y', x='x').opts(cmap='Blues', clim=(vmin,vmax), width=1000, height=750)",
    "crumbs": [
      "Tutorials",
      "Science Workflow"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_s3Access_real_data_v11.html",
    "href": "Tutorials/SWOTHR_s3Access_real_data_v11.html",
    "title": "SWOT Hydrology Dataset Exploration in the Cloud",
    "section": "",
    "text": "This tutorial can only be run in an AWS cloud instance running in us-west-2: NASA Earthdata Cloud data in S3 can be directly accessed via earthaccess python library; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\n\nAccess SWOT HR data prodcuts (archived in NASA Earthdata Cloud) within the AWS cloud, without downloading to local machine\nVisualize accessed data for a quick check\n\n\n\n\nRiver Vector Shapefile - SWOT_L2_HR_RIVERSP_1.1\nLake Vector Shapefile - SWOT_L2_HR_LAKESP_1.1\nWater Mask Pixel Cloud NetCDF - SWOT_L2_HR_PIXC_1.1\nWater Mask Pixel Cloud Vector Attribute NetCDF - SWOT_L2_HR_PIXCVec_1.1\nRaster NetCDF - SWOT_L2_HR_Raster_1.1\nSingle Look Complex Data product - SWOT_L1B_HR_SLC_1.1\n\nNotebook Author: Cassie Nickles, NASA PO.DAAC (Aug 2023) || Other Contributors: Zoe Walschots (PO.DAAC Summer Intern 2023), Catalina Taglialatela (NASA PO.DAAC), Luis Lopez (NASA NSIDC DAAC)\nLast updated: 4 Dec 2023\n\n\n\n\n\nimport glob\nimport os\nimport requests\nimport s3fs\nimport fiona\nimport netCDF4 as nc\nimport h5netcdf\nimport xarray as xr\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport hvplot.xarray\nimport earthaccess\nfrom earthaccess import Auth, DataCollections, DataGranules, Store\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. If you don’t already have one, please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. We use earthaccess to authenticate your login credentials below.\n\nauth = earthaccess.login()\n\n\n\n\n\n\nThe s3 access link can be found using earthaccess data search. Since this collection consists of Reach and Node files, we need to extract only the granule for the Reach file. We do this by filtering for the ‘Reach’ title in the data link.\nAlternatively, Earthdata Search (see tutorial) can be used to search in a map graphic user interface.\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n\n\n\n# Retrieves granule from the day we want, in this case by passing to `earthdata.search_data` function the data collection shortname, temporal bounds, and for restricted data one must specify the search count\nriver_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_RIVERSP_1.1', \n                                        temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'),\n                                        granule_name = '*Reach*_024_NA*') # here we filter by Reach files (not node), pass #24 and continent code=NA for North America\n                                        # granule_name = '*Reach*_013_NA*') # here we filter by Reach files (not node), pass #13 and continent code=NA\n\nGranules found: 15\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=river_results)\n\n\n\n\nThe native format for this data is a .zip file, and we want the .shp file within the .zip file, so we will create a Fiona AWS session using the credentials from setting up the s3fs session above to access the shapefiles within the zip files. If we don’t do this, the alternative would be to download the data to the cloud environment (e.g. EC2 instance, user S3 bucket) and extract the .zip file there.\n\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\n\n# Get the link for the first zip file\nriver_link = earthaccess.results.DataGranule.data_links(river_results[0], access='direct')[0]\n\n# We use the zip+ prefix so fiona knows that we are operating on a zip file\nriver_shp_url = f\"zip+{river_link}\"\n\nwith fiona.Env(session=fiona_session):\n    SWOT_HR_shp1 = gpd.read_file(river_shp_url) \n\n#view the attribute table\nSWOT_HR_shp1 \n\n\n\n\n\n\n\n\nreach_id\ntime\ntime_tai\ntime_str\np_lat\np_lon\nriver_name\nwse\nwse_u\nwse_r_u\n...\np_wid_var\np_n_nodes\np_dist_out\np_length\np_maf\np_dam_id\np_n_ch_max\np_n_ch_mod\np_low_slp\ngeometry\n\n\n\n\n0\n71185400013\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.405348\n-106.628388\nno_data\n3.864838e+02\n1.139410e+00\n1.135850e+00\n...\n7863771.149\n48\n61917.017\n9521.873154\n-1.000000e+12\n0\n10\n2\n0\nLINESTRING (-106.60903 55.44509, -106.60930 55...\n\n\n1\n71185400021\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.452342\n-106.601114\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n0.000\n10\n53346.297\n1902.305299\n-1.000000e+12\n0\n5\n1\n0\nLINESTRING (-106.59293 55.45986, -106.59320 55...\n\n\n2\n71185400033\n-1.000000e+12\n-1.000000e+12\nno_data\n55.632220\n-106.451323\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n758315.173\n14\n28676.430\n2858.149671\n-1.000000e+12\n0\n7\n2\n0\nLINESTRING (-106.47121 55.62881, -106.47073 55...\n\n\n3\n71185400041\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.361687\n-106.646694\nno_data\n3.861999e+02\n9.139000e-02\n1.588000e-02\n...\n0.000\n5\n62976.523\n1059.505878\n-1.000000e+12\n0\n5\n1\n0\nLINESTRING (-106.64608 55.36668, -106.64607 55...\n\n\n4\n71185400053\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.350062\n-106.647210\nno_data\n3.861795e+02\n1.022600e-01\n4.855000e-02\n...\n3214.190\n8\n64492.945\n1516.422084\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-106.64728 55.35669, -106.64736 55...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n594\n75211000291\n-1.000000e+12\n-1.000000e+12\nno_data\n26.100287\n-98.270345\nRio Bravo\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n123.027\n53\n238333.030\n10660.888100\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-98.25015 26.07251, -98.25039 26.0...\n\n\n595\n75211000301\n-1.000000e+12\n-1.000000e+12\nno_data\n26.115209\n-98.305631\nRio Grande\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n242.204\n53\n248976.010\n10642.980241\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-98.27467 26.11517, -98.27497 26.1...\n\n\n596\n75211000683\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.955223\n-97.159176\nRio Grande\n2.871000e-01\n9.005000e-02\n3.080000e-03\n...\n436.214\n18\n9238.006\n3611.160551\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.14980 25.95092, -97.15011 25.9...\n\n\n597\n75211000691\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.957129\n-97.209134\nRio Grande\n3.374000e-01\n9.102000e-02\n1.360000e-02\n...\n348.855\n53\n19926.935\n10688.929343\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.16943 25.96060, -97.16972 25.9...\n\n\n598\n75211000701\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.945001\n-97.279869\nRio Grande\n4.375000e-01\n9.212000e-02\n1.965000e-02\n...\n203.786\n53\n30608.499\n10681.563344\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.25170 25.94769, -97.25200 25.9...\n\n\n\n\n599 rows × 127 columns\n\n\n\n\n\n\n\n# Simple plot\nfig, ax = plt.subplots(figsize=(7,5))\nSWOT_HR_shp1.plot(ax=ax, color='black')\n\n\n\n\n\n\n\n\n\n# # Another way to plot geopandas dataframes is with `explore`, which also plots a basemap\nSWOT_HR_shp1.explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\nThe lake vector shapefiles can be accessed in the same way as the river shapefiles above.\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n\n\n\nlake_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_LAKESP_1.1', \n                                       temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'),\n                                       granule_name = '*Obs*_024_NA*')\n                                       # granule_name = '*Obs*_013_NA*') # here we filter by files with 'Obs' in the name (This collection has three options: Obs, Unassigned, and Prior), pass #13 and continent code=NA\n\nGranules found: 15\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=lake_results)\n\n\n\n\nThe native format for this data is a .zip file, and we want the .shp file within the .zip file, so we will create a Fiona AWS session using the credentials from setting up the s3fs session above to access the shapefiles within the zip files. If we don’t do this, the alternative would be to download the data to the cloud environment (e.g. EC2 instance, user S3 bucket) and extract the .zip file there.\n\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\n\n# Get the link for the first zip file\nlake_link = earthaccess.results.DataGranule.data_links(lake_results[0], access='direct')[0]\n\n# We use the zip+ prefix so fiona knows that we are operating on a zip file\nlake_shp_url = f\"zip+{lake_link}\"\n\nwith fiona.Env(session=fiona_session):\n    SWOT_HR_shp2 = gpd.read_file(lake_shp_url) \n\n#view the attribute table\nSWOT_HR_shp2\n\n\n\n\n\n\n\n\nobs_id\nlake_id\noverlap\nn_overlap\nreach_id\ntime\ntime_tai\ntime_str\nwse\nwse_u\n...\nload_tidef\nload_tideg\npole_tide\ndry_trop_c\nwet_trop_c\niono_c\nxovr_cal_c\nlake_name\np_res_id\ngeometry\n\n\n\n\n0\n711056R000000\n7110058862\n43\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:42Z\n456.591\n0.068\n...\n0.012544\n0.011979\n-0.001644\n-2.171307\n-0.096968\n-0.004681\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-108.10263 55.82828, -108.10271 55.8...\n\n\n1\n711056R000006\n7110057883;7110044502\n32;0\n2\n71185900011;71185900023;71185900031;7118590004...\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:47Z\n420.100\n0.043\n...\n0.012521\n0.011962\n-0.001645\n-2.179560\n-0.095098\n-0.004694\n-1.000000e+12\nILE-A-LA-CROSSE\n-99999999\nMULTIPOLYGON (((-108.04803 55.51018, -108.0481...\n\n\n2\n711056R000002\n7110044512;7110045352\n93;2\n2\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n423.307\n0.130\n...\n0.012743\n0.012195\n-0.001671\n-2.177715\n-0.099736\n-0.004680\n-1.000000e+12\nPETER POND;NISKA LAKE\n-99999999\nMULTIPOLYGON (((-108.63716 55.67995, -108.6372...\n\n\n3\n711056R000003\n7110044502\n0\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:42Z\n421.265\n0.718\n...\n0.012595\n0.012031\n-0.001651\n-2.178498\n-0.098505\n-0.004681\n-1.000000e+12\nFROBISHER LAKE;NIPAWIN BAY;PETER POND LAKE;CHU...\n-99999999\nMULTIPOLYGON (((-108.22462 55.77025, -108.2251...\n\n\n4\n711056R001623\n7110061392\n70\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:52Z\n433.682\n0.159\n...\n0.012518\n0.011977\n-0.001648\n-2.176805\n-0.093354\n-0.004701\n-1.000000e+12\nAMYOT LAKE\n-99999999\nMULTIPOLYGON (((-107.87588 55.21497, -107.8759...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5084\n753111R000533\n7530074612\n33\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n1.204\n0.151\n...\n0.003597\n0.004175\n-0.001930\n-2.332590\n-0.261529\n-0.010383\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.73272 25.04506, -97.73275 ...\n\n\n5085\n753111R000813\n7530075482\n9\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.851\n0.166\n...\n0.003638\n0.004185\n-0.001905\n-2.332652\n-0.261308\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-97.74014 25.04083, -97.74030 25.041...\n\n\n5086\n753111R000849\n7530072312\n82\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.507\n0.058\n...\n0.003659\n0.004194\n-0.001900\n-2.332774\n-0.261139\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-97.75064 25.04090, -97.75067 25.041...\n\n\n5087\n753111R000883\n7530075482\n66\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.577\n0.027\n...\n0.003676\n0.004200\n-0.001788\n-2.332951\n-0.261053\n-0.010387\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.76046 25.03127, -97.76049 ...\n\n\n5088\n753111R000978\n7530075052\n50\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n3.190\n0.062\n...\n0.003768\n0.004261\n-0.001394\n-2.332381\n-0.260291\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.79919 25.02889, -97.79933 ...\n\n\n\n\n5089 rows × 36 columns\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(7,5))\nSWOT_HR_shp2.plot(ax=ax, color='black')\n\n\n\n\n\n\n\n\n\n# # Another way to plot geopandas dataframes is with `explore`, which also plots a basemap\n# SWOT_HR_shp2.explore()\n\n\n# # [Optional] Diving a bit deeper, plotting riversP and lakeSP overlaid on same map\n# m = SWOT_HR_shp1.explore()  #define the riverSP map\n# SWOT_HR_shp2.explore(m=m, color=\"orange\")  #plot the riverSP with the lakesSP data, where lakes are in orange\n\nAccessing the remaining files is different than the shp files above. We do not need to read the shapefiles within a zip file using something like Fiona session (or to download and unzip in the cloud) because the following SWOT HR collections are stored in netCDF files in the cloud. For the rest of the products, we will open via xarray, not geopandas.\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\npixc_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_PIXC_1.1',\n                                       temporal = ('2023-04-22 00:00:00', '2023-04-22 23:59:59'), \n                                       granule_name = '*_498_024_101L*')\n                                       # granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013                                       \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=pixc_results)\n\n# get link for file 1\npixc_link = earthaccess.results.DataGranule.data_links(pixc_results[0], access='direct')[0]\n\ns3_file_obj3 = fs_s3.open(pixc_link, mode='rb')\n\n\n\n\nThe pixel cloud netCDF files are formatted with three groups titled, “pixel cloud”, “tvp”, or “noise” (more detail here). In order to access the coordinates and variables within the file, a group must be specified when calling xarray open_dataset.\n\nds_PIXC = xr.open_dataset(s3_file_obj3, group = 'pixel_cloud', engine='h5netcdf')\nds_PIXC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                                (points: 6842667, complex_depth: 2,\n                                            num_pixc_lines: 3249)\nCoordinates:\n    latitude                               (points) float64 ...\n    longitude                              (points) float64 ...\nDimensions without coordinates: points, complex_depth, num_pixc_lines\nData variables: (12/57)\n    azimuth_index                          (points) float64 ...\n    range_index                            (points) float64 ...\n    interferogram                          (points, complex_depth) float32 ...\n    power_plus_y                           (points) float32 ...\n    power_minus_y                          (points) float32 ...\n    coherent_power                         (points) float32 ...\n    ...                                     ...\n    interferogram_qual                     (points) float64 ...\n    classification_qual                    (points) float64 ...\n    geolocation_qual                       (points) float64 ...\n    sig0_qual                              (points) float64 ...\n    pixc_line_qual                         (num_pixc_lines) float64 ...\n    pixc_line_to_tvp                       (num_pixc_lines) float32 ...\nAttributes:\n    description:                 cloud of geolocated interferogram pixels\n    interferogram_size_azimuth:  3249\n    interferogram_size_range:    4758\n    looks_to_efflooks:           1.5368636877472777\n    num_azimuth_looks:           7.0\n    azimuth_offset:              8xarray.DatasetDimensions:points: 6842667complex_depth: 2num_pixc_lines: 3249Coordinates: (2)latitude(points)float64...long_name :latitude (positive N, negative S)standard_name :latitudeunits :degrees_northquality_flag :geolocation_qualvalid_min :-80.0valid_max :80.0comment :Geodetic latitude [-80,80] (degrees north of equator) of the pixel.[6842667 values with dtype=float64]longitude(points)float64...long_name :longitude (degrees East)standard_name :longitudeunits :degrees_eastquality_flag :geolocation_qualvalid_min :-180.0valid_max :180.0comment :Longitude [-180,180) (east of the Greenwich meridian) of the pixel.[6842667 values with dtype=float64]Data variables: (57)azimuth_index(points)float64...long_name :rare interferogram azimuth indexunits :1valid_min :0valid_max :999999comment :Rare interferogram azimuth index (indexed from 0).[6842667 values with dtype=float64]range_index(points)float64...long_name :rare interferogram range indexunits :1valid_min :0valid_max :999999comment :Rare interferogram range index (indexed from 0).[6842667 values with dtype=float64]interferogram(points, complex_depth)float32...long_name :rare interferogramunits :1quality_flag :interferogram_qualvalid_min :-1e+20valid_max :1e+20comment :Complex unflattened rare interferogram.[13685334 values with dtype=float32]power_plus_y(points)float32...long_name :power for plus_y channelunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power for the plus_y channel (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]power_minus_y(points)float32...long_name :power for minus_y channelunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power for the minus_y channel (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]coherent_power(points)float32...long_name :coherent power combination of minus_y and plus_y channelsunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power computed by combining the plus_y and minus_y channels coherently by co-aligning the phases (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]x_factor_plus_y(points)float32...long_name :X factor for plus_y channel powerunits :1valid_min :0.0valid_max :1e+20comment :X factor for the plus_y channel power in linear units (arbitrary units to normalize noise-subtracted power to sigma0).[6842667 values with dtype=float32]x_factor_minus_y(points)float32...long_name :X factor for minus_y channel powerunits :1valid_min :0.0valid_max :1e+20comment :X factor for the minus_y channel power in linear units (arbitrary units to normalize noise-subtracted power to sigma0).[6842667 values with dtype=float32]water_frac(points)float32...long_name :water fractionunits :1quality_flag :classification_qualvalid_min :-1000.0valid_max :10000.0comment :Noisy estimate of the fraction of the pixel that is water.[6842667 values with dtype=float32]water_frac_uncert(points)float32...long_name :water fraction uncertaintyunits :1valid_min :0.0valid_max :999999.0comment :Uncertainty estimate of the water fraction estimate (width of noisy water frac estimate distribution).[6842667 values with dtype=float32]classification(points)float32...long_name :classificationquality_flag :classification_qualflag_meanings :land land_near_water water_near_land open_water dark_water low_coh_water_near_land open_low_coh_waterflag_values :[1 2 3 4 5 6 7]valid_min :1valid_max :7comment :Flags indicating water detection results.[6842667 values with dtype=float32]false_detection_rate(points)float32...long_name :false detection rateunits :1quality_flag :classification_qualvalid_min :0.0valid_max :1.0comment :Probability of falsely detecting water when there is none.[6842667 values with dtype=float32]missed_detection_rate(points)float32...long_name :missed detection rateunits :1quality_flag :classification_qualvalid_min :0.0valid_max :1.0comment :Probability of falsely detecting no water when there is water.[6842667 values with dtype=float32]prior_water_prob(points)float32...long_name :prior water probabilityunits :1valid_min :0.0valid_max :1.0comment :Prior probability of water occurring.[6842667 values with dtype=float32]bright_land_flag(points)float32...long_name :bright land flagstandard_name :status_flagflag_meanings :not_bright_land bright_land bright_land_or_waterflag_values :[0 1 2]valid_min :0valid_max :2comment :Flag indicating areas that are not typically water but are expected to be bright (e.g., urban areas, ice).  Flag value 2 indicates cases where prior data indicate land, but where prior_water_prob indicates possible water.[6842667 values with dtype=float32]layover_impact(points)float32...long_name :layover impactunits :mvalid_min :-999999.0valid_max :999999.0comment :Estimate of the height error caused by layover, which may not be reliable on a pixel by pixel basis, but may be useful to augment aggregated height uncertainties.[6842667 values with dtype=float32]eff_num_rare_looks(points)float32...long_name :effective number of rare looksunits :1valid_min :0.0valid_max :999999.0comment :Effective number of independent looks taken to form the rare interferogram.[6842667 values with dtype=float32]height(points)float32...long_name :height above reference ellipsoidunits :mquality_flag :geolocation_qualvalid_min :-1500.0valid_max :15000.0comment :Height of the pixel above the reference ellipsoid.[6842667 values with dtype=float32]cross_track(points)float32...long_name :approximate cross-track locationunits :mquality_flag :geolocation_qualvalid_min :-75000.0valid_max :75000.0comment :Approximate cross-track location of the pixel.[6842667 values with dtype=float32]pixel_area(points)float32...long_name :pixel areaunits :m^2quality_flag :geolocation_qualvalid_min :0.0valid_max :999999.0comment :Pixel area.[6842667 values with dtype=float32]inc(points)float32...long_name :incidence angleunits :degreesquality_flag :geolocation_qualvalid_min :0.0valid_max :999999.0comment :Incidence angle.[6842667 values with dtype=float32]phase_noise_std(points)float32...long_name :phase noise standard deviationunits :radiansvalid_min :-999999.0valid_max :999999.0comment :Estimate of the phase noise standard deviation.[6842667 values with dtype=float32]dlatitude_dphase(points)float32...long_name :sensitivity of latitude estimate to interferogram phaseunits :degrees/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the latitude estimate to the interferogram phase.[6842667 values with dtype=float32]dlongitude_dphase(points)float32...long_name :sensitivity of longitude estimate to interferogram phaseunits :degrees/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the longitude estimate to the interferogram phase.[6842667 values with dtype=float32]dheight_dphase(points)float32...long_name :sensitivity of height estimate to interferogram phaseunits :m/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the interferogram phase.[6842667 values with dtype=float32]dheight_droll(points)float32...long_name :sensitivity of height estimate to spacecraft rollunits :m/degreesquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the spacecraft roll.[6842667 values with dtype=float32]dheight_dbaseline(points)float32...long_name :sensitivity of height estimate to interferometric baselineunits :m/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the interferometric baseline.[6842667 values with dtype=float32]dheight_drange(points)float32...long_name :sensitivity of height estimate to range (delay)units :m/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the range (delay).[6842667 values with dtype=float32]darea_dheight(points)float32...long_name :sensitivity of pixel area to reference heightunits :m^2/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the pixel area to the reference height.[6842667 values with dtype=float32]illumination_time(points)datetime64[ns]...long_name :time of illumination of each pixel (UTC)standard_name :timetai_utc_difference :37.0leap_second :0000-00-00T00:00:00Zcomment :Time of measurement in seconds in the UTC time scale since 1 Jan 2000 00:00:00 UTC. [tai_utc_difference] is the difference between TAI and UTC reference time (seconds) for the first measurement of the data set. If a leap second occurs within the data set, the attribute leap_second is set to the UTC time at which the leap second occurs.[6842667 values with dtype=datetime64[ns]]illumination_time_tai(points)datetime64[ns]...long_name :time of illumination of each pixel (TAI)standard_name :timecomment :Time of measurement in seconds in the TAI time scale since 1 Jan 2000 00:00:00 TAI. This time scale contains no leap seconds. The difference (in seconds) with time in UTC is given by the attribute [illumination_time:tai_utc_difference].[6842667 values with dtype=datetime64[ns]]eff_num_medium_looks(points)float32...long_name :effective number of medium looksunits :1valid_min :0.0valid_max :999999.0comment :Effective number of independent looks taken in forming the medium interferogram (after adaptive averaging).[6842667 values with dtype=float32]sig0(points)float32...long_name :sigma0units :1quality_flag :sig0_qualvalid_min :-999999.0valid_max :999999.0comment :Normalized radar cross section (sigma0) in real, linear units (not decibels). The value may be negative due to noise subtraction.[6842667 values with dtype=float32]sig0_uncert(points)float32...long_name :sigma0 uncertaintyunits :1valid_min :-999999.0valid_max :999999.0comment :1-sigma uncertainty in the sig0 measurement.  The value is given as an additive (not multiplicative) linear term (not a term in decibels).[6842667 values with dtype=float32]phase_unwrapping_region(points)float64...long_name :phase unwrapping region indexunits :1valid_min :-1valid_max :99999999comment :Phase unwrapping region index.[6842667 values with dtype=float64]ambiguity_cost1(points)float32...long_name :phase ambiguity minimum costunits :1valid_min :-999999.0valid_max :999999.0comment :Phase ambiguity minimum cost.[6842667 values with dtype=float32]ambiguity_cost2(points)float32...long_name :phase ambiguity 2nd minimum costunits :1valid_min :-999999.0valid_max :999999.0comment :Phase ambiguity 2nd minimum cost.[6842667 values with dtype=float32]instrument_range_cor(points)float32...long_name :instrument range correctionunits :mvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to range before geolocation.[6842667 values with dtype=float32]instrument_phase_cor(points)float32...long_name :instrument phase correctionunits :radiansvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to phase before geolocation.[6842667 values with dtype=float32]instrument_baseline_cor(points)float32...long_name :instrument baseline correctionunits :mvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to baseline before geolocation.[6842667 values with dtype=float32]sig0_cor_atmos_model(points)float32...long_name :two-way atmospheric correction to sigma0 from modelsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :1valid_min :1.0valid_max :10.0comment :Atmospheric correction to sigma0 from weather model data as a linear power multiplier (not decibels). sig0_cor_atmos_model is already applied in computing sig0 and x_factor_plus_y and x_factor_minus_y.[6842667 values with dtype=float32]height_cor_xover(points)float32...long_name :height correction from KaRIn crossoversunits :mvalid_min :-10.0valid_max :10.0comment :Height correction from KaRIn crossover calibration. The correction is applied before geolocation but reported as an equivalent height correction.[6842667 values with dtype=float32]model_dry_tropo_cor(points)float32...long_name :dry troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :mvalid_min :-3.0valid_max :-1.5comment :Equivalent vertical correction due to dry troposphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]model_wet_tropo_cor(points)float32...long_name :wet troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :mvalid_min :-1.0valid_max :0.0comment :Equivalent vertical correction due to wet troposphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]iono_cor_gim_ka(points)float32...long_name :ionosphere vertical correctionsource :Global Ionosphere Mapsinstitution :JPLunits :mvalid_min :-0.5valid_max :0.0comment :Equivalent vertical correction due to ionosphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]geoid(points)float32...long_name :geoid heightstandard_name :geoid_height_above_reference_ellipsoidsource :EGM2008 (Pavlis et al., 2012)units :mvalid_min :-150.0valid_max :150.0comment :Geoid height above the reference ellipsoid with a correction to refer the value to the mean tide system, i.e. includes the permanent tide (zero frequency).  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]solid_earth_tide(points)float32...long_name :solid Earth tide heightsource :Cartwright and Taylor (1971) and Cartwright and Edden (1973)units :mvalid_min :-1.0valid_max :1.0comment :Solid-Earth (body) tide height. The zero-frequency permanent tide component is not included.  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]load_tide_fes(points)float32...long_name :geocentric load tide height (FES)source :FES2014b (Carrere et al., 2016)institution :LEGOS/CNESunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth's crust. This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]load_tide_got(points)float32...long_name :geocentric load tide height (GOT)source :GOT4.10c (Ray, 2013)institution :GSFCunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth's crust. This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]pole_tide(points)float32...long_name :geocentric pole tide heightsource :Wahr (1985) and Desai et al. (2015)units :mvalid_min :-0.2valid_max :0.2comment :Geocentric pole tide height. The total of the contribution from the solid-Earth (body) pole tide height and the load pole tide height (i.e., the effect of the ocean pole tide loading of the Earth's crust).  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]ancillary_surface_classification_flag(points)float32...long_name :surface classificationstandard_name :status_flagsource :MODIS/GlobCoverinstitution :European Space Agencyflag_meanings :open_ocean land continental_water aquatic_vegetation continental_ice_snow floating_ice salted_basinflag_values :[0 1 2 3 4 5 6]valid_min :0valid_max :6comment :7-state surface type classification computed from a mask built with MODIS and GlobCover data.[6842667 values with dtype=float32]interferogram_qual(points)float64...standard_name :status_flagflag_meanings :rare_power_suspect rare_phase_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded rare_power_bad rare_phase_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[      2048       4096       8192      16384      32768     262144\n     524288  134217728  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4161599488comment :Quality flag for the interferogram quantities in the pixel cloud data[6842667 values with dtype=float64]classification_qual(points)float64...standard_name :status_flagflag_meanings :no_coherent_gain power_close_to_noise_floor detected_water_but_no_prior_water detected_water_but_bright_land water_false_detection_rate_suspect coherent_power_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded coherent_power_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8         16       2048\n       8192      16384      32768     262144     524288  134217728\n  536870912 1073741824 2147483648]valid_min :0valid_max :3893159967comment :Quality flag for the classification quantities in the pixel cloud data[6842667 values with dtype=float64]geolocation_qual(points)float64...standard_name :status_flagflag_meanings :layover_significant phase_noise_suspect phase_unwrapping_suspect model_dry_tropo_cor_suspect model_wet_tropo_cor_suspect iono_cor_gim_ka_suspect xovercal_suspect medium_phase_suspect tvp_suspect sc_event_suspect small_karin_gap specular_ringing_degraded model_dry_tropo_cor_missing model_wet_tropo_cor_missing iono_cor_gim_ka_missing xovercal_missing geolocation_is_from_refloc no_geolocation_bad medium_phase_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8         16         32\n         64       4096       8192      16384      32768     524288\n    1048576    2097152    4194304    8388608   16777216  134217728\n  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4193841279comment :Quality flag for the geolocation quantities in the pixel cloud data[6842667 values with dtype=float64]sig0_qual(points)float64...standard_name :status_flagflag_meanings :sig0_uncert_suspect sig0_cor_atmos_suspect noise_power_suspect xfactor_suspect rare_power_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded sig0_cor_atmos_missing noise_power_bad xfactor_bad rare_power_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8       2048       8192\n      16384      32768     262144     524288    1048576   33554432\n   67108864  134217728  536870912 1073741824 2147483648]valid_min :0valid_max :3994871823comment :Quality flag for sig0[6842667 values with dtype=float64]pixc_line_qual(num_pixc_lines)float64...standard_name :status_flagflag_meanings :not_in_tile tvp_suspect sc_event_suspect small_karin_gap tvp_bad sc_event_bad large_karin_gapflag_masks :[         1       8192      16384      32768  536870912 1073741824\n 2147483649]valid_min :0valid_max :3758153729comment :Quality flag for pixel cloud data per rare-posted interferogram line (similar to slc_qual in the L1B_HR_SLC product)[3249 values with dtype=float64]pixc_line_to_tvp(num_pixc_lines)float32...long_name :pixel cloud rare line to tvp indexunits :1valid_min :0.0valid_max :999999.0comment :Pixel cloud rare radar grid line index to tvp index mapping[3249 values with dtype=float32]Indexes: (0)Attributes: (6)description :cloud of geolocated interferogram pixelsinterferogram_size_azimuth :3249interferogram_size_range :4758looks_to_efflooks :1.5368636877472777num_azimuth_looks :7.0azimuth_offset :8\n\n\n\n\n\n\n# This could take a few minutes to plot\nplt.scatter(x=ds_PIXC.longitude, y=ds_PIXC.latitude, c=ds_PIXC.height)\nplt.colorbar().set_label('Height (m)')\n\n\n\n\n\n\n\n\n\n# plt.scatter(x=ds_PIXC.longitude, y=ds_PIXC.latitude, c=ds_PIXC.classification)\n# plt.colorbar().set_label('Classification')\n\n\n\n\n\n\n\n\npixcvec_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_PIXCVEC_1.1', \n                                          temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'), \n                                          granule_name = '*_498_024_101L*')\n                                          # granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013 \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=pixcvec_results)\n\n# get link for file 0\npixcvec_link = earthaccess.results.DataGranule.data_links(pixcvec_results[0], access='direct')[0]\n\ns3_file_obj4 = fs_s3.open(pixcvec_link, mode='rb')\n\n\n\n\n\nds_PIXCVEC = xr.open_dataset(s3_file_obj4, decode_cf=False,  engine='h5netcdf')\nds_PIXCVEC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:               (points: 6842667, nchar_reach_id: 11,\n                           nchar_node_id: 14, nchar_lake_id: 10,\n                           nchar_obs_id: 13)\nDimensions without coordinates: points, nchar_reach_id, nchar_node_id,\n                                nchar_lake_id, nchar_obs_id\nData variables:\n    azimuth_index         (points) int32 ...\n    range_index           (points) int32 ...\n    latitude_vectorproc   (points) float64 ...\n    longitude_vectorproc  (points) float64 ...\n    height_vectorproc     (points) float32 ...\n    reach_id              (points, nchar_reach_id) |S1 ...\n    node_id               (points, nchar_node_id) |S1 ...\n    lake_id               (points, nchar_lake_id) |S1 ...\n    obs_id                (points, nchar_obs_id) |S1 ...\n    ice_clim_f            (points) int8 ...\n    ice_dyn_f             (points) int8 ...\nAttributes: (12/45)\n    Conventions:                     CF-1.7\n    title:                           Level 2 KaRIn high rate pixel cloud vect...\n    short_name:                      L2_HR_PIXCVec\n    institution:                     JPL\n    source:                          Level 1B KaRIn High Rate Single Look Com...\n    history:                         2023-10-03T00:34:10.665297Z: Creation\n    ...                              ...\n    xref_prior_river_db_file:        \n    xref_prior_lake_db_file:         SWOT_LakeDatabase_Cal_024_20000101T00000...\n    xref_reforbittrack_files:        SWOT_RefOrbitTrackTileBoundary_Cal_20000...\n    xref_param_l2_hr_laketile_file:  SWOT_Param_L2_HR_LakeTile_20000101T00000...\n    ellipsoid_semi_major_axis:       6378137.0\n    ellipsoid_flattening:            0.0033528106647474805xarray.DatasetDimensions:points: 6842667nchar_reach_id: 11nchar_node_id: 14nchar_lake_id: 10nchar_obs_id: 13Coordinates: (0)Data variables: (11)azimuth_index(points)int32..._FillValue :2147483647long_name :rare interferogram azimuth indexunits :1valid_min :0valid_max :999999coordinates :longitude_vectorproc latitude_vectorproccomment :Rare interferogram azimuth index (indexed from 0).[6842667 values with dtype=int32]range_index(points)int32..._FillValue :2147483647long_name :rare interferogram range indexunits :1valid_min :0valid_max :999999coordinates :longitude_vectorproc latitude_vectorproccomment :Rare interferogram range index (indexed from 0).[6842667 values with dtype=int32]latitude_vectorproc(points)float64..._FillValue :9.969209968386869e+36long_name :height-constrained geolocation latitudestandard_name :latitudeunits :degrees_northvalid_min :-80.0valid_max :80.0comment :Height-constrained geodetic latitude of the pixel. Units are in degrees north of the equator.[6842667 values with dtype=float64]longitude_vectorproc(points)float64..._FillValue :9.969209968386869e+36long_name :height-constrained geolocation longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :Height-constrained geodetic longitude of the pixel. Positive=degrees east of the Greenwich meridian. Negative=degrees west of the Greenwich meridian.[6842667 values with dtype=float64]height_vectorproc(points)float32..._FillValue :9.96921e+36long_name :height above reference ellipsoidunits :mvalid_min :-1500.0valid_max :15000.0coordinates :longitude_vectorproc latitude_vectorproccomment :Height-constrained height of the pixel above the reference ellipsoid.[6842667 values with dtype=float32]reach_id(points, nchar_reach_id)|S1...long_name :identifier of the associated prior river reachcoordinates :longitude_vectorproc latitude_vectorproccomment :Unique reach identifier from the prior river database. The format of the identifier is CBBBBBRRRRT, where C=continent, B=basin, R=reach, T=type.[75269337 values with dtype=|S1]node_id(points, nchar_node_id)|S1...long_name :identifier of the associated prior river nodecoordinates :longitude_vectorproc latitude_vectorproccomment :Unique node identifier from the prior river database. The format of the identifier is CBBBBBRRRRNNNT, where C=continent, B=basin, R=reach, N=node, T=type of water body.[95797338 values with dtype=|S1]lake_id(points, nchar_lake_id)|S1...long_name :identifier of the associated prior lakecoordinates :longitude_vectorproc latitude_vectorproccomment :Identifier of the lake from the lake prior database) associated to the pixel. The format of the identifier is CBBNNNNNNT, where C=continent, B=basin, N=counter within the basin, T=type of water body.[68426670 values with dtype=|S1]obs_id(points, nchar_obs_id)|S1...long_name :identifier of the observed featurecoordinates :longitude_vectorproc latitude_vectorproccomment :Tile-specific identifier of the observed feature associated to the pixel. The format of the identifier is CBBTTTSNNNNNN, where C=continent, B=basin, T=tile number, S=swath side, N=lake counter within the PIXC tile.[88954671 values with dtype=|S1]ice_clim_f(points)int8..._FillValue :127long_name :climatological ice cover flagflag_meanings :no_ice_cover uncertain_ice_cover full_ice_coverflag_values :[0 1 2]institution :University of North Carolinacoordinates :longitude_vectorproc latitude_vectorproccomment :Climatological ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on external climatological information (not the SWOT measurement). Values of 0, 1, and 2 indicate that the surface is not ice covered, may or may not be partially or fully ice covered, and fully ice covered, respectively. A value of 127 indicates that this flag is not available.[6842667 values with dtype=int8]ice_dyn_f(points)int8..._FillValue :127long_name :dynamical ice cover flagflag_meanings :no_ice_cover partial_ice_cover full_ice_coverflag_values :[0 1 2]institution :University of North Carolinacoordinates :longitude_vectorproc latitude_vectorproccomment :Dynamic ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on analysis of external satellite optical data. Values of 0, 1, and 2 indicate that the surface is not ice covered, partially ice covered, and fully ice covered, respectively. A value of 255 indicates that this flag is not available.[6842667 values with dtype=int8]Indexes: (0)Attributes: (45)Conventions :CF-1.7title :Level 2 KaRIn high rate pixel cloud vector attribute productshort_name :L2_HR_PIXCVecinstitution :JPLsource :Level 1B KaRIn High Rate Single Look Complex Data Producthistory :2023-10-03T00:34:10.665297Z: Creationplatform :SWOTreferences :SWOT-DD-CDM-0565-CNES_SAS_Design_L2_HR_LakeSP - Revision A - 20220531reference_document :SWOT-TN-CDM-0677-CNES_Product_Description_L2_HR_PIXCVec - Revision A - 20220531product_version :V5.2.0crid :PIB0pge_name :PGE_L2_HR_LakeSPpge_version :V4.2.0contact :SWOT-contact@cnes.frcycle_number :498pass_number :24tile_number :101swath_side :Ltile_name :024_101Lcontinent_id :NAcontinent_code :7time_granule_start :2023-04-22T14:08:59.777643Ztime_granule_end :2023-04-22T14:09:10.791471Ztime_coverage_start :2023-04-22T14:09:00.319545Ztime_coverage_end :2023-04-22T14:09:10.241821Zgeospatial_lon_min :-98.50412772789815geospatial_lon_max :-97.68274315266319geospatial_lat_min :30.225915614959504geospatial_lat_max :30.963393644220716inner_first_longitude :-98.50412772789815inner_first_latitude :30.851058225779166inner_last_longitude :-98.34293396836563inner_last_latitude :30.225915614959504outer_first_longitude :-97.82378265890407outer_first_latitude :30.963393644220716outer_last_longitude :-97.68274315266319outer_last_latitude :30.334391846701063xref_l2_hr_pixc_file :SWOT_L2_HR_PIXC_498_024_101L_20230422T140859_20230422T140910_PIB0_01.ncxref_l2_hr_pixcvecriver_file :SWOT_L2_HR_PIXCVecRiver_498_024_101L_20230422T140859_20230422T140910_PIB0_01.ncxref_prior_river_db_file :xref_prior_lake_db_file :SWOT_LakeDatabase_Cal_024_20000101T000000_20991231T235959_20230614T000000_v102.sqlitexref_reforbittrack_files :SWOT_RefOrbitTrackTileBoundary_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txtxref_param_l2_hr_laketile_file :SWOT_Param_L2_HR_LakeTile_20000101T000000_20991231T235959_20230614T170000_v410.cfgellipsoid_semi_major_axis :6378137.0ellipsoid_flattening :0.0033528106647474805\n\n\n\n\n\n\npixcvec_htvals = ds_PIXCVEC.height_vectorproc.compute()\npixcvec_latvals = ds_PIXCVEC.latitude_vectorproc.compute()\npixcvec_lonvals = ds_PIXCVEC.longitude_vectorproc.compute()\n\n#Before plotting, we set all fill values to nan so that the graph shows up better spatially\npixcvec_htvals[pixcvec_htvals &gt; 15000] = np.nan\npixcvec_latvals[pixcvec_latvals &lt; 1] = np.nan\npixcvec_lonvals[pixcvec_lonvals &gt; -1] = np.nan\n\n\nplt.scatter(x=pixcvec_lonvals, y=pixcvec_latvals, c=pixcvec_htvals)\nplt.colorbar().set_label('Height (m)')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n#Say we know the exact cycle, pass & scene. We can search for one data granule!\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = '*100m*_498_024_051F*')\n                                         # granule_name = '*100m*_498_013_130F*') # here we filter by files with '100m' in the name (This collection has two resolution options: 100m & 250m), cycle=498, pass=013, scene = 130F \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=raster_results)\n\n# get link for file \nraster_link = earthaccess.results.DataGranule.data_links(raster_results[0], access='direct')[0]\n\ns3_file_obj5 = fs_s3.open(raster_link, mode='rb')\n\n\n\n\n\nds_raster = xr.open_dataset(s3_file_obj5, engine='h5netcdf')\nds_raster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                  (x: 1505, y: 1505)\nCoordinates:\n  * x                        (x) float64 4.855e+05 4.856e+05 ... 6.359e+05\n  * y                        (y) float64 3.272e+06 3.272e+06 ... 3.422e+06\nData variables: (12/39)\n    crs                      object ...\n    longitude                (y, x) float64 ...\n    latitude                 (y, x) float64 ...\n    wse                      (y, x) float32 ...\n    wse_qual                 (y, x) float32 ...\n    wse_qual_bitwise         (y, x) float64 ...\n    ...                       ...\n    load_tide_fes            (y, x) float32 ...\n    load_tide_got            (y, x) float32 ...\n    pole_tide                (y, x) float32 ...\n    model_dry_tropo_cor      (y, x) float32 ...\n    model_wet_tropo_cor      (y, x) float32 ...\n    iono_cor_gim_ka          (y, x) float32 ...\nAttributes: (12/49)\n    Conventions:                   CF-1.7\n    title:                         Level 2 KaRIn High Rate Raster Data Product\n    source:                        Ka-band radar interferometer\n    history:                       2023-10-04T10:18:05Z : Creation\n    platform:                      SWOT\n    reference_document:            JPL D-56416 - Revision B - October 24, 2022\n    ...                            ...\n    x_max:                         635900.0\n    y_min:                         3271900.0\n    y_max:                         3422300.0\n    institution:                   JPL\n    references:                    V1.0\n    product_version:               01xarray.DatasetDimensions:x: 1505y: 1505Coordinates: (2)x(x)float644.855e+05 4.856e+05 ... 6.359e+05long_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :mvalid_min :-10000000.0valid_max :10000000.0comment :UTM easting coordinate of the pixel.array([485500., 485600., 485700., ..., 635700., 635800., 635900.])y(y)float643.272e+06 3.272e+06 ... 3.422e+06long_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :mvalid_min :-20000000.0valid_max :20000000.0comment :UTM northing coordinate of the pixel.array([3271900., 3272000., 3272100., ..., 3422100., 3422200., 3422300.])Data variables: (39)crs()object...long_name :CRS Definitiongrid_mapping_name :transverse_mercatorprojected_crs_name :WGS 84 / UTM zone 14Ngeographic_crs_name :WGS 84reference_ellipsoid_name :WGS 84horizontal_datum_name :WGS_1984prime_meridian_name :Greenwichfalse_easting :500000.0false_northing :0.0longitude_of_central_meridian :-99.0longitude_of_prime_meridian :0.0latitude_of_projection_origin :0.0scale_factor_at_central_meridian :0.9996semi_major_axis :6378137.0inverse_flattening :298.257223563crs_wkt :PROJCS[\"WGS 84 / UTM zone 14N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-99],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32614\"]]spatial_ref :PROJCS[\"WGS 84 / UTM zone 14N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-99],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32614\"]]comment :UTM zone coordinate reference system.[1 values with dtype=object]longitude(y, x)float64...long_name :longitude (degrees East)standard_name :longitudegrid_mapping :crsunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :Geodetic longitude [-180,180) (east of the Greenwich meridian) of the pixel.[2265025 values with dtype=float64]latitude(y, x)float64...long_name :latitude (positive N, negative S)standard_name :latitudegrid_mapping :crsunits :degrees_northvalid_min :-80.0valid_max :80.0comment :Geodetic latitude [-80,80] (degrees north of equator) of the pixel.[2265025 values with dtype=float64]wse(y, x)float32...long_name :water surface elevation above geoidgrid_mapping :crsunits :mquality_flag :wse_qualvalid_min :-1500.0valid_max :15000.0comment :Water surface elevation of the pixel above the geoid and after using models to subtract the effects of tides (solid_earth_tide, load_tide_fes, pole_tide).[2265025 values with dtype=float32]wse_qual(y, x)float32...long_name :summary quality indicator for the water surface elevationstandard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the water surface elevation quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]wse_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the water surface elevationstandard_name :status_flaggrid_mapping :crsflag_meanings :classification_qual_suspect geolocation_qual_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         2          4         32        128       4096       8192\n      16384     262144     524288   16777216  268435456  536870912\n 1073741824 2147483648]valid_min :0valid_max :4044124326comment :Bitwise quality indicator for the water surface elevation quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]wse_uncert(y, x)float32...long_name :uncertainty in the water surface elevationgrid_mapping :crsunits :mvalid_min :0.0valid_max :999999.0comment :1-sigma uncertainty in the water surface elevation.[2265025 values with dtype=float32]water_area(y, x)float32...long_name :water surface areagrid_mapping :crsunits :m^2quality_flag :water_area_qualvalid_min :-2000000.0valid_max :2000000000.0comment :Surface area of the water pixels.[2265025 values with dtype=float32]water_area_qual(y, x)float32...long_name :summary quality indicator for the water surface areastandard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the water surface area and water fraction quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]water_area_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the water surface areastandard_name :status_flaggrid_mapping :crsflag_meanings :classification_qual_suspect geolocation_qual_suspect water_fraction_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         2          4          8         32        128       4096\n       8192      16384     262144     524288   16777216  268435456\n  536870912 1073741824 2147483648]valid_min :0valid_max :4044124334comment :Bitwise quality indicator for the water surface area and water fraction quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]water_area_uncert(y, x)float32...long_name :uncertainty in the water surface areagrid_mapping :crsunits :m^2valid_min :0.0valid_max :2000000000.0comment :1-sigma uncertainty in the water surface area.[2265025 values with dtype=float32]water_frac(y, x)float32...long_name :water fractiongrid_mapping :crsunits :1quality_flag :water_area_qualvalid_min :-1000.0valid_max :10000.0comment :Fraction of the pixel that is water.[2265025 values with dtype=float32]water_frac_uncert(y, x)float32...long_name :uncertainty in the water fractiongrid_mapping :crsunits :1valid_min :0.0valid_max :999999.0comment :1-sigma uncertainty in the water fraction.[2265025 values with dtype=float32]sig0(y, x)float32...long_name :sigma0grid_mapping :crsunits :1quality_flag :sig0_qualvalid_min :-1000.0valid_max :10000000.0comment :Normalized radar cross section (sigma0) in real, linear units (not decibels). The value may be negative due to noise subtraction.[2265025 values with dtype=float32]sig0_qual(y, x)float32...long_name :summary quality indicator for the sigma0standard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the sigma0 quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]sig0_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the sigma0standard_name :status_flaggrid_mapping :crsflag_meanings :sig0_qual_suspect classification_qual_suspect geolocation_qual_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect sig0_qual_degraded classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         1          2          4         32        128       4096\n       8192      16384     131072     262144     524288   16777216\n  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4044255399comment :Bitwise quality indicator for the sigma0 quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]sig0_uncert(y, x)float32...long_name :uncertainty in sigma0grid_mapping :crsunits :1valid_min :0.0valid_max :1000.0comment :1-sigma uncertainty in sigma0. The value is provided in linear units. This value is a one-sigma additive (not multiplicative) uncertainty term, which can be added to or subtracted from sigma0.[2265025 values with dtype=float32]inc(y, x)float32...long_name :incidence anglegrid_mapping :crsunits :degreesvalid_min :0.0valid_max :90.0comment :Incidence angle.[2265025 values with dtype=float32]cross_track(y, x)float32...long_name :approximate cross-track locationgrid_mapping :crsunits :mvalid_min :-75000.0valid_max :75000.0comment :Approximate cross-track location of the pixel.[2265025 values with dtype=float32]illumination_time(y, x)datetime64[ns]...long_name :time of illumination of each pixel (UTC)standard_name :timetai_utc_difference :37.0leap_second :0000-00-00T00:00:00Zcomment :Time of measurement in seconds in the UTC time scale since 1 Jan 2000 00:00:00 UTC. [tai_utc_difference] is the difference between TAI and UTC reference time (seconds) for the first measurement of the data set. If a leap second occurs within the data set, the attribute leap_second is set to the UTC time at which the leap second occurs.[2265025 values with dtype=datetime64[ns]]illumination_time_tai(y, x)datetime64[ns]...long_name :time of illumination of each pixel (TAI)standard_name :timecomment :Time of measurement in seconds in the TAI time scale since 1 Jan 2000 00:00:00 TAI. This time scale contains no leap seconds. The difference (in seconds) with time in UTC is given by the attribute [illumination_time:tai_utc_difference].[2265025 values with dtype=datetime64[ns]]n_wse_pix(y, x)float64...long_name :number of water surface elevation pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in water surface elevation aggregation.[2265025 values with dtype=float64]n_water_area_pix(y, x)float64...long_name :number of water surface area pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in water surface area and water fraction aggregation.[2265025 values with dtype=float64]n_sig0_pix(y, x)float64...long_name :number of sigma0 pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in sigma0 aggregation.[2265025 values with dtype=float64]n_other_pix(y, x)float64...long_name :number of other pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in aggregation of quantities not related to water surface elevation, water surface area, water fraction or sigma0.[2265025 values with dtype=float64]dark_frac(y, x)float32...long_name :fractional area of dark watergrid_mapping :crsunits :lvalid_min :-1000.0valid_max :10000.0comment :Fraction of pixel water surface area covered by dark water.[2265025 values with dtype=float32]ice_clim_flag(y, x)float32...long_name :climatological ice cover flagstandard_name :status_flagsource :UNCgrid_mapping :crsflag_meanings :no_ice_cover uncertain_ice_cover full_ice_coverflag_values :[0 1 2]valid_min :0valid_max :2comment :Climatological ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on external climatological information (not the SWOT measurement). Values of 0, 1, and 2 indicate that the pixel is likely not ice covered, may or may not be partially or fully ice covered, and likely fully ice covered, respectively.[2265025 values with dtype=float32]ice_dyn_flag(y, x)float32...long_name :dynamic ice cover flagstandard_name :status_flagsource :UNCgrid_mapping :crsflag_meanings :no_ice_cover partial_ice_cover full_ice_coverflag_values :[0 1 2]valid_min :0valid_max :2comment :Dynamic ice cover flag indicating whether the surface is ice-covered on the day of the observation based on analysis of external satellite optical data.  Values of 0, 1, and 2 indicate that the pixel is not ice covered, partially ice covered, and fully ice covered, respectively.[2265025 values with dtype=float32]layover_impact(y, x)float32...long_name :layover impactgrid_mapping :crsunits :mvalid_min :-999999.0valid_max :999999.0comment :Estimate of the water surface elevation error caused by layover.[2265025 values with dtype=float32]sig0_cor_atmos_model(y, x)float32...long_name :two-way atmospheric correction to sigma0 from modelsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :1valid_min :1.0valid_max :10.0comment :Atmospheric correction to sigma0 from weather model data as a linear power multiplier (not decibels). sig0_cor_atmos_model is already applied in computing sig0.[2265025 values with dtype=float32]height_cor_xover(y, x)float32...long_name :height correction from KaRIn crossoversgrid_mapping :crsunits :mvalid_min :-10.0valid_max :10.0comment :Height correction from KaRIn crossover calibration. The correction is applied before geolocation but reported as an equivalent height correction.[2265025 values with dtype=float32]geoid(y, x)float32...long_name :geoid heightstandard_name :geoid_height_above_reference_ellipsoidsource :EGM2008 (Pavlis et al., 2012)grid_mapping :crsunits :mvalid_min :-150.0valid_max :150.0comment :Geoid height above the reference ellipsoid with a correction to refer the value to the mean tide system, i.e. includes the permanent tide (zero frequency).[2265025 values with dtype=float32]solid_earth_tide(y, x)float32...long_name :solid Earth tide heightsource :Cartwright and Taylor (1971) and Cartwright and Edden (1973)grid_mapping :crsunits :mvalid_min :-1.0valid_max :1.0comment :Solid-Earth (body) tide height. The zero-frequency permanent tide component is not included.[2265025 values with dtype=float32]load_tide_fes(y, x)float32...long_name :geocentric load tide height (FES)source :FES2014b (Carrere et al., 2016)institution :LEGOS/CNESgrid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth’s crust.[2265025 values with dtype=float32]load_tide_got(y, x)float32...long_name :geocentric load tide height (GOT)source :GOT4.10c (Ray, 2013)institution :GSFCgrid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth’s crust. This value is reported for reference but is not applied to the reported height.[2265025 values with dtype=float32]pole_tide(y, x)float32...long_name :geocentric pole tide heightsource :Wahr (1985) and Desai et al. (2015)grid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric pole tide height. The total of the contribution from the solid-Earth (body) pole tide height and the load pole tide height (i.e., the effect of the ocean pole tide loading of the Earth’s crust).[2265025 values with dtype=float32]model_dry_tropo_cor(y, x)float32...long_name :dry troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :mvalid_min :-3.0valid_max :-1.5comment :Equivalent vertical correction due to dry troposphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]model_wet_tropo_cor(y, x)float32...long_name :wet troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :mvalid_min :-1.0valid_max :0.0comment :Equivalent vertical correction due to wet troposphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]iono_cor_gim_ka(y, x)float32...long_name :ionosphere vertical correctionsource :Global Ionosphere Mapsinstitution :JPLgrid_mapping :crsunits :mvalid_min :-0.5valid_max :0.0comment :Equivalent vertical correction due to ionosphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]Indexes: (2)xPandasIndexPandasIndex(Float64Index([485500.0, 485600.0, 485700.0, 485800.0, 485900.0, 486000.0,\n              486100.0, 486200.0, 486300.0, 486400.0,\n              ...\n              635000.0, 635100.0, 635200.0, 635300.0, 635400.0, 635500.0,\n              635600.0, 635700.0, 635800.0, 635900.0],\n             dtype='float64', name='x', length=1505))yPandasIndexPandasIndex(Float64Index([3271900.0, 3272000.0, 3272100.0, 3272200.0, 3272300.0, 3272400.0,\n              3272500.0, 3272600.0, 3272700.0, 3272800.0,\n              ...\n              3421400.0, 3421500.0, 3421600.0, 3421700.0, 3421800.0, 3421900.0,\n              3422000.0, 3422100.0, 3422200.0, 3422300.0],\n             dtype='float64', name='y', length=1505))Attributes: (49)Conventions :CF-1.7title :Level 2 KaRIn High Rate Raster Data Productsource :Ka-band radar interferometerhistory :2023-10-04T10:18:05Z : Creationplatform :SWOTreference_document :JPL D-56416 - Revision B - October 24, 2022contact :alexander.t.corben[at]jpl.nasa.govcycle_number :498pass_number :24scene_number :51tile_numbers :[100 101 102 103 100 101 102 103]tile_names :024_100L, 024_101L, 024_102L, 024_103L, 024_100R, 024_101R, 024_102R, 024_103Rtile_polarizations :H, H, H, H, V, V, V, Vcoordinate_reference_system :Universal Transverse Mercatorresolution :100.0short_name :L2_HR_Rasterdescriptor_string :100m_UTM14R_N_x_x_xcrid :PIB0pge_name :PGE_L2_HR_RASTERpge_version :4.3.1time_granule_start :2023-04-22T14:08:59.773882Ztime_granule_end :2023-04-22T14:09:20.715685Ztime_coverage_start :2023-04-22T14:09:00.310942Ztime_coverage_end :2023-04-22T14:09:20.176743Zgeospatial_lon_min :-99.15144259381215geospatial_lon_max :-97.59361273278951geospatial_lat_min :29.57685751046376geospatial_lat_max :30.929033865009067left_first_longitude :-97.83833737461467left_first_latitude :30.929033865009067left_last_longitude :-97.59361273278951left_last_latitude :29.793281951000594right_first_longitude :-99.15144259381215right_first_latitude :30.708483340005156right_last_longitude :-98.89264426789154right_last_latitude :29.57685751046376xref_l2_hr_pixc_files :SWOT_L2_HR_PIXC_498_024_100L_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_101L_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_102L_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_103L_20230422T140919_20230422T140930_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_100R_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_101R_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_102R_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_103R_20230422T140919_20230422T140930_PIB0_01.ncxref_l2_hr_pixcvec_files :SWOT_L2_HR_PIXCVec_498_024_100L_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_101L_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_102L_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_103L_20230422T140919_20230422T140930_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_100R_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_101R_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_102R_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_103R_20230422T140919_20230422T140930_PIB0_01.ncxref_param_l2_hr_raster_file :SWOT_Param_L2_HR_Raster_20000101T000000_21000101T000000_20230321T100000_v301.rdfxref_reforbittrack_files :SWOT_RefOrbitTrackTileBoundary_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txt, SWOT_RefOrbitTrack125mPass1_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txt, SWOT_RefOrbitTrack125mPass2_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txtutm_zone_num :14mgrs_latitude_band :Rx_min :485500.0x_max :635900.0y_min :3271900.0y_max :3422300.0institution :JPLreferences :V1.0product_version :01\n\n\n\n\n\n\nds_raster.wse.hvplot.image(y='y', x='x')\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\nslc_results = earthaccess.search_data(short_name = 'SWOT_L1B_HR_SLC_1.1',\n                                       temporal = ('2023-04-22 00:00:00', '2023-04-22 23:59:59'), \n                                       granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013 with wildcards\n\nGranules found: 164\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=slc_results)\n\n# get link for file \nslc_link = earthaccess.results.DataGranule.data_links(slc_results[0], access='direct')[0]\n\ns3_file_obj6 = fs_s3.open(slc_link, mode='rb')\n\n\n\n\nThe L1B_HR_SLC product file contains five NetCDF data group called the slc, xfactor, noise, tvp, and grdem groups. More info can be found in the product description document within the dataset table for each group.\n\nds_SLC = xr.open_dataset(s3_file_obj6, group = 'slc', engine='h5netcdf')\nds_SLC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (num_lines: 17954, num_pixels: 4630, complex_depth: 2)\nDimensions without coordinates: num_lines, num_pixels, complex_depth\nData variables:\n    slc_plus_y   (num_lines, num_pixels, complex_depth) float32 ...\n    slc_minus_y  (num_lines, num_pixels, complex_depth) float32 ...\n    slc_qual     (num_lines) float32 ...\nAttributes:\n    description:  Single look complex images for plus_y and minus_y channelsxarray.DatasetDimensions:num_lines: 17954num_pixels: 4630complex_depth: 2Coordinates: (0)Data variables: (3)slc_plus_y(num_lines, num_pixels, complex_depth)float32...long_name :single look complex image for the plus_y channelunits :1valid_min :-1e+20valid_max :1e+20comment :SLC complex image for the plus_y channel (arbitrary scaling consistent with the X factor).[166254040 values with dtype=float32]slc_minus_y(num_lines, num_pixels, complex_depth)float32...long_name :single look complex image for the minus_y channelunits :1valid_min :-1e+20valid_max :1e+20comment :SLC complex image for the minus_y channel (arbitrary scaling consistent with the X factor).[166254040 values with dtype=float32]slc_qual(num_lines)float32...long_name :SLC quality flagstandard_name :status_flagflag_meanings :tvp_suspect sc_event_suspect small_karin_gap tvp_bad sc_event_bad large_karin_gapflag_masks :[  1   2   4  32  64 128]valid_min :0valid_max :231comment :Flag indicating conditions that may affect the quality of the SLC data.[17954 values with dtype=float32]Indexes: (0)Attributes: (1)description :Single look complex images for plus_y and minus_y channels",
    "crumbs": [
      "Tutorials",
      "Intro to HR Datasets"
    ]
  },
  {
    "objectID": "Tutorials/SWOTHR_s3Access_real_data_v11.html#accessing-and-visualizing-swot-datasets",
    "href": "Tutorials/SWOTHR_s3Access_real_data_v11.html#accessing-and-visualizing-swot-datasets",
    "title": "SWOT Hydrology Dataset Exploration in the Cloud",
    "section": "",
    "text": "This tutorial can only be run in an AWS cloud instance running in us-west-2: NASA Earthdata Cloud data in S3 can be directly accessed via earthaccess python library; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\n\nAccess SWOT HR data prodcuts (archived in NASA Earthdata Cloud) within the AWS cloud, without downloading to local machine\nVisualize accessed data for a quick check\n\n\n\n\nRiver Vector Shapefile - SWOT_L2_HR_RIVERSP_1.1\nLake Vector Shapefile - SWOT_L2_HR_LAKESP_1.1\nWater Mask Pixel Cloud NetCDF - SWOT_L2_HR_PIXC_1.1\nWater Mask Pixel Cloud Vector Attribute NetCDF - SWOT_L2_HR_PIXCVec_1.1\nRaster NetCDF - SWOT_L2_HR_Raster_1.1\nSingle Look Complex Data product - SWOT_L1B_HR_SLC_1.1\n\nNotebook Author: Cassie Nickles, NASA PO.DAAC (Aug 2023) || Other Contributors: Zoe Walschots (PO.DAAC Summer Intern 2023), Catalina Taglialatela (NASA PO.DAAC), Luis Lopez (NASA NSIDC DAAC)\nLast updated: 4 Dec 2023\n\n\n\n\n\nimport glob\nimport os\nimport requests\nimport s3fs\nimport fiona\nimport netCDF4 as nc\nimport h5netcdf\nimport xarray as xr\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport hvplot.xarray\nimport earthaccess\nfrom earthaccess import Auth, DataCollections, DataGranules, Store\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. If you don’t already have one, please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. We use earthaccess to authenticate your login credentials below.\n\nauth = earthaccess.login()\n\n\n\n\n\n\nThe s3 access link can be found using earthaccess data search. Since this collection consists of Reach and Node files, we need to extract only the granule for the Reach file. We do this by filtering for the ‘Reach’ title in the data link.\nAlternatively, Earthdata Search (see tutorial) can be used to search in a map graphic user interface.\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n\n\n\n# Retrieves granule from the day we want, in this case by passing to `earthdata.search_data` function the data collection shortname, temporal bounds, and for restricted data one must specify the search count\nriver_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_RIVERSP_1.1', \n                                        temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'),\n                                        granule_name = '*Reach*_024_NA*') # here we filter by Reach files (not node), pass #24 and continent code=NA for North America\n                                        # granule_name = '*Reach*_013_NA*') # here we filter by Reach files (not node), pass #13 and continent code=NA\n\nGranules found: 15\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=river_results)\n\n\n\n\nThe native format for this data is a .zip file, and we want the .shp file within the .zip file, so we will create a Fiona AWS session using the credentials from setting up the s3fs session above to access the shapefiles within the zip files. If we don’t do this, the alternative would be to download the data to the cloud environment (e.g. EC2 instance, user S3 bucket) and extract the .zip file there.\n\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\n\n# Get the link for the first zip file\nriver_link = earthaccess.results.DataGranule.data_links(river_results[0], access='direct')[0]\n\n# We use the zip+ prefix so fiona knows that we are operating on a zip file\nriver_shp_url = f\"zip+{river_link}\"\n\nwith fiona.Env(session=fiona_session):\n    SWOT_HR_shp1 = gpd.read_file(river_shp_url) \n\n#view the attribute table\nSWOT_HR_shp1 \n\n\n\n\n\n\n\n\nreach_id\ntime\ntime_tai\ntime_str\np_lat\np_lon\nriver_name\nwse\nwse_u\nwse_r_u\n...\np_wid_var\np_n_nodes\np_dist_out\np_length\np_maf\np_dam_id\np_n_ch_max\np_n_ch_mod\np_low_slp\ngeometry\n\n\n\n\n0\n71185400013\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.405348\n-106.628388\nno_data\n3.864838e+02\n1.139410e+00\n1.135850e+00\n...\n7863771.149\n48\n61917.017\n9521.873154\n-1.000000e+12\n0\n10\n2\n0\nLINESTRING (-106.60903 55.44509, -106.60930 55...\n\n\n1\n71185400021\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.452342\n-106.601114\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n0.000\n10\n53346.297\n1902.305299\n-1.000000e+12\n0\n5\n1\n0\nLINESTRING (-106.59293 55.45986, -106.59320 55...\n\n\n2\n71185400033\n-1.000000e+12\n-1.000000e+12\nno_data\n55.632220\n-106.451323\nno_data\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n758315.173\n14\n28676.430\n2858.149671\n-1.000000e+12\n0\n7\n2\n0\nLINESTRING (-106.47121 55.62881, -106.47073 55...\n\n\n3\n71185400041\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.361687\n-106.646694\nno_data\n3.861999e+02\n9.139000e-02\n1.588000e-02\n...\n0.000\n5\n62976.523\n1059.505878\n-1.000000e+12\n0\n5\n1\n0\nLINESTRING (-106.64608 55.36668, -106.64607 55...\n\n\n4\n71185400053\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n55.350062\n-106.647210\nno_data\n3.861795e+02\n1.022600e-01\n4.855000e-02\n...\n3214.190\n8\n64492.945\n1516.422084\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-106.64728 55.35669, -106.64736 55...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n594\n75211000291\n-1.000000e+12\n-1.000000e+12\nno_data\n26.100287\n-98.270345\nRio Bravo\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n123.027\n53\n238333.030\n10660.888100\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-98.25015 26.07251, -98.25039 26.0...\n\n\n595\n75211000301\n-1.000000e+12\n-1.000000e+12\nno_data\n26.115209\n-98.305631\nRio Grande\n-1.000000e+12\n-1.000000e+12\n-1.000000e+12\n...\n242.204\n53\n248976.010\n10642.980241\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-98.27467 26.11517, -98.27497 26.1...\n\n\n596\n75211000683\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.955223\n-97.159176\nRio Grande\n2.871000e-01\n9.005000e-02\n3.080000e-03\n...\n436.214\n18\n9238.006\n3611.160551\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.14980 25.95092, -97.15011 25.9...\n\n\n597\n75211000691\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.957129\n-97.209134\nRio Grande\n3.374000e-01\n9.102000e-02\n1.360000e-02\n...\n348.855\n53\n19926.935\n10688.929343\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.16943 25.96060, -97.16972 25.9...\n\n\n598\n75211000701\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:20Z\n25.945001\n-97.279869\nRio Grande\n4.375000e-01\n9.212000e-02\n1.965000e-02\n...\n203.786\n53\n30608.499\n10681.563344\n-1.000000e+12\n0\n1\n1\n0\nLINESTRING (-97.25170 25.94769, -97.25200 25.9...\n\n\n\n\n599 rows × 127 columns\n\n\n\n\n\n\n\n# Simple plot\nfig, ax = plt.subplots(figsize=(7,5))\nSWOT_HR_shp1.plot(ax=ax, color='black')\n\n\n\n\n\n\n\n\n\n# # Another way to plot geopandas dataframes is with `explore`, which also plots a basemap\nSWOT_HR_shp1.explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n\nThe lake vector shapefiles can be accessed in the same way as the river shapefiles above.\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n\n\n\nlake_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_LAKESP_1.1', \n                                       temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'),\n                                       granule_name = '*Obs*_024_NA*')\n                                       # granule_name = '*Obs*_013_NA*') # here we filter by files with 'Obs' in the name (This collection has three options: Obs, Unassigned, and Prior), pass #13 and continent code=NA\n\nGranules found: 15\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=lake_results)\n\n\n\n\nThe native format for this data is a .zip file, and we want the .shp file within the .zip file, so we will create a Fiona AWS session using the credentials from setting up the s3fs session above to access the shapefiles within the zip files. If we don’t do this, the alternative would be to download the data to the cloud environment (e.g. EC2 instance, user S3 bucket) and extract the .zip file there.\n\nfiona_session=fiona.session.AWSSession(\n        aws_access_key_id=fs_s3.storage_options[\"key\"],\n        aws_secret_access_key=fs_s3.storage_options[\"secret\"],\n        aws_session_token=fs_s3.storage_options[\"token\"]\n    )\n\n\n# Get the link for the first zip file\nlake_link = earthaccess.results.DataGranule.data_links(lake_results[0], access='direct')[0]\n\n# We use the zip+ prefix so fiona knows that we are operating on a zip file\nlake_shp_url = f\"zip+{lake_link}\"\n\nwith fiona.Env(session=fiona_session):\n    SWOT_HR_shp2 = gpd.read_file(lake_shp_url) \n\n#view the attribute table\nSWOT_HR_shp2\n\n\n\n\n\n\n\n\nobs_id\nlake_id\noverlap\nn_overlap\nreach_id\ntime\ntime_tai\ntime_str\nwse\nwse_u\n...\nload_tidef\nload_tideg\npole_tide\ndry_trop_c\nwet_trop_c\niono_c\nxovr_cal_c\nlake_name\np_res_id\ngeometry\n\n\n\n\n0\n711056R000000\n7110058862\n43\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:42Z\n456.591\n0.068\n...\n0.012544\n0.011979\n-0.001644\n-2.171307\n-0.096968\n-0.004681\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-108.10263 55.82828, -108.10271 55.8...\n\n\n1\n711056R000006\n7110057883;7110044502\n32;0\n2\n71185900011;71185900023;71185900031;7118590004...\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:47Z\n420.100\n0.043\n...\n0.012521\n0.011962\n-0.001645\n-2.179560\n-0.095098\n-0.004694\n-1.000000e+12\nILE-A-LA-CROSSE\n-99999999\nMULTIPOLYGON (((-108.04803 55.51018, -108.0481...\n\n\n2\n711056R000002\n7110044512;7110045352\n93;2\n2\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:43Z\n423.307\n0.130\n...\n0.012743\n0.012195\n-0.001671\n-2.177715\n-0.099736\n-0.004680\n-1.000000e+12\nPETER POND;NISKA LAKE\n-99999999\nMULTIPOLYGON (((-108.63716 55.67995, -108.6372...\n\n\n3\n711056R000003\n7110044502\n0\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:42Z\n421.265\n0.718\n...\n0.012595\n0.012031\n-0.001651\n-2.178498\n-0.098505\n-0.004681\n-1.000000e+12\nFROBISHER LAKE;NIPAWIN BAY;PETER POND LAKE;CHU...\n-99999999\nMULTIPOLYGON (((-108.22462 55.77025, -108.2251...\n\n\n4\n711056R001623\n7110061392\n70\n1\nno_data\n7.342856e+08\n7.342856e+08\n2023-04-08T16:12:52Z\n433.682\n0.159\n...\n0.012518\n0.011977\n-0.001648\n-2.176805\n-0.093354\n-0.004701\n-1.000000e+12\nAMYOT LAKE\n-99999999\nMULTIPOLYGON (((-107.87588 55.21497, -107.8759...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5084\n753111R000533\n7530074612\n33\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n1.204\n0.151\n...\n0.003597\n0.004175\n-0.001930\n-2.332590\n-0.261529\n-0.010383\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.73272 25.04506, -97.73275 ...\n\n\n5085\n753111R000813\n7530075482\n9\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.851\n0.166\n...\n0.003638\n0.004185\n-0.001905\n-2.332652\n-0.261308\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-97.74014 25.04083, -97.74030 25.041...\n\n\n5086\n753111R000849\n7530072312\n82\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.507\n0.058\n...\n0.003659\n0.004194\n-0.001900\n-2.332774\n-0.261139\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nPOLYGON ((-97.75064 25.04090, -97.75067 25.041...\n\n\n5087\n753111R000883\n7530075482\n66\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n0.577\n0.027\n...\n0.003676\n0.004200\n-0.001788\n-2.332951\n-0.261053\n-0.010387\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.76046 25.03127, -97.76049 ...\n\n\n5088\n753111R000978\n7530075052\n50\n1\nno_data\n7.342861e+08\n7.342861e+08\n2023-04-08T16:21:48Z\n3.190\n0.062\n...\n0.003768\n0.004261\n-0.001394\n-2.332381\n-0.260291\n-0.010385\n-1.000000e+12\nno_data\n-99999999\nMULTIPOLYGON (((-97.79919 25.02889, -97.79933 ...\n\n\n\n\n5089 rows × 36 columns\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(7,5))\nSWOT_HR_shp2.plot(ax=ax, color='black')\n\n\n\n\n\n\n\n\n\n# # Another way to plot geopandas dataframes is with `explore`, which also plots a basemap\n# SWOT_HR_shp2.explore()\n\n\n# # [Optional] Diving a bit deeper, plotting riversP and lakeSP overlaid on same map\n# m = SWOT_HR_shp1.explore()  #define the riverSP map\n# SWOT_HR_shp2.explore(m=m, color=\"orange\")  #plot the riverSP with the lakesSP data, where lakes are in orange\n\nAccessing the remaining files is different than the shp files above. We do not need to read the shapefiles within a zip file using something like Fiona session (or to download and unzip in the cloud) because the following SWOT HR collections are stored in netCDF files in the cloud. For the rest of the products, we will open via xarray, not geopandas.\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\npixc_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_PIXC_1.1',\n                                       temporal = ('2023-04-22 00:00:00', '2023-04-22 23:59:59'), \n                                       granule_name = '*_498_024_101L*')\n                                       # granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013                                       \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=pixc_results)\n\n# get link for file 1\npixc_link = earthaccess.results.DataGranule.data_links(pixc_results[0], access='direct')[0]\n\ns3_file_obj3 = fs_s3.open(pixc_link, mode='rb')\n\n\n\n\nThe pixel cloud netCDF files are formatted with three groups titled, “pixel cloud”, “tvp”, or “noise” (more detail here). In order to access the coordinates and variables within the file, a group must be specified when calling xarray open_dataset.\n\nds_PIXC = xr.open_dataset(s3_file_obj3, group = 'pixel_cloud', engine='h5netcdf')\nds_PIXC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                                (points: 6842667, complex_depth: 2,\n                                            num_pixc_lines: 3249)\nCoordinates:\n    latitude                               (points) float64 ...\n    longitude                              (points) float64 ...\nDimensions without coordinates: points, complex_depth, num_pixc_lines\nData variables: (12/57)\n    azimuth_index                          (points) float64 ...\n    range_index                            (points) float64 ...\n    interferogram                          (points, complex_depth) float32 ...\n    power_plus_y                           (points) float32 ...\n    power_minus_y                          (points) float32 ...\n    coherent_power                         (points) float32 ...\n    ...                                     ...\n    interferogram_qual                     (points) float64 ...\n    classification_qual                    (points) float64 ...\n    geolocation_qual                       (points) float64 ...\n    sig0_qual                              (points) float64 ...\n    pixc_line_qual                         (num_pixc_lines) float64 ...\n    pixc_line_to_tvp                       (num_pixc_lines) float32 ...\nAttributes:\n    description:                 cloud of geolocated interferogram pixels\n    interferogram_size_azimuth:  3249\n    interferogram_size_range:    4758\n    looks_to_efflooks:           1.5368636877472777\n    num_azimuth_looks:           7.0\n    azimuth_offset:              8xarray.DatasetDimensions:points: 6842667complex_depth: 2num_pixc_lines: 3249Coordinates: (2)latitude(points)float64...long_name :latitude (positive N, negative S)standard_name :latitudeunits :degrees_northquality_flag :geolocation_qualvalid_min :-80.0valid_max :80.0comment :Geodetic latitude [-80,80] (degrees north of equator) of the pixel.[6842667 values with dtype=float64]longitude(points)float64...long_name :longitude (degrees East)standard_name :longitudeunits :degrees_eastquality_flag :geolocation_qualvalid_min :-180.0valid_max :180.0comment :Longitude [-180,180) (east of the Greenwich meridian) of the pixel.[6842667 values with dtype=float64]Data variables: (57)azimuth_index(points)float64...long_name :rare interferogram azimuth indexunits :1valid_min :0valid_max :999999comment :Rare interferogram azimuth index (indexed from 0).[6842667 values with dtype=float64]range_index(points)float64...long_name :rare interferogram range indexunits :1valid_min :0valid_max :999999comment :Rare interferogram range index (indexed from 0).[6842667 values with dtype=float64]interferogram(points, complex_depth)float32...long_name :rare interferogramunits :1quality_flag :interferogram_qualvalid_min :-1e+20valid_max :1e+20comment :Complex unflattened rare interferogram.[13685334 values with dtype=float32]power_plus_y(points)float32...long_name :power for plus_y channelunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power for the plus_y channel (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]power_minus_y(points)float32...long_name :power for minus_y channelunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power for the minus_y channel (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]coherent_power(points)float32...long_name :coherent power combination of minus_y and plus_y channelsunits :1quality_flag :interferogram_qualvalid_min :0.0valid_max :1e+20comment :Power computed by combining the plus_y and minus_y channels coherently by co-aligning the phases (arbitrary units that give sigma0 when noise subtracted and normalized by the X factor).[6842667 values with dtype=float32]x_factor_plus_y(points)float32...long_name :X factor for plus_y channel powerunits :1valid_min :0.0valid_max :1e+20comment :X factor for the plus_y channel power in linear units (arbitrary units to normalize noise-subtracted power to sigma0).[6842667 values with dtype=float32]x_factor_minus_y(points)float32...long_name :X factor for minus_y channel powerunits :1valid_min :0.0valid_max :1e+20comment :X factor for the minus_y channel power in linear units (arbitrary units to normalize noise-subtracted power to sigma0).[6842667 values with dtype=float32]water_frac(points)float32...long_name :water fractionunits :1quality_flag :classification_qualvalid_min :-1000.0valid_max :10000.0comment :Noisy estimate of the fraction of the pixel that is water.[6842667 values with dtype=float32]water_frac_uncert(points)float32...long_name :water fraction uncertaintyunits :1valid_min :0.0valid_max :999999.0comment :Uncertainty estimate of the water fraction estimate (width of noisy water frac estimate distribution).[6842667 values with dtype=float32]classification(points)float32...long_name :classificationquality_flag :classification_qualflag_meanings :land land_near_water water_near_land open_water dark_water low_coh_water_near_land open_low_coh_waterflag_values :[1 2 3 4 5 6 7]valid_min :1valid_max :7comment :Flags indicating water detection results.[6842667 values with dtype=float32]false_detection_rate(points)float32...long_name :false detection rateunits :1quality_flag :classification_qualvalid_min :0.0valid_max :1.0comment :Probability of falsely detecting water when there is none.[6842667 values with dtype=float32]missed_detection_rate(points)float32...long_name :missed detection rateunits :1quality_flag :classification_qualvalid_min :0.0valid_max :1.0comment :Probability of falsely detecting no water when there is water.[6842667 values with dtype=float32]prior_water_prob(points)float32...long_name :prior water probabilityunits :1valid_min :0.0valid_max :1.0comment :Prior probability of water occurring.[6842667 values with dtype=float32]bright_land_flag(points)float32...long_name :bright land flagstandard_name :status_flagflag_meanings :not_bright_land bright_land bright_land_or_waterflag_values :[0 1 2]valid_min :0valid_max :2comment :Flag indicating areas that are not typically water but are expected to be bright (e.g., urban areas, ice).  Flag value 2 indicates cases where prior data indicate land, but where prior_water_prob indicates possible water.[6842667 values with dtype=float32]layover_impact(points)float32...long_name :layover impactunits :mvalid_min :-999999.0valid_max :999999.0comment :Estimate of the height error caused by layover, which may not be reliable on a pixel by pixel basis, but may be useful to augment aggregated height uncertainties.[6842667 values with dtype=float32]eff_num_rare_looks(points)float32...long_name :effective number of rare looksunits :1valid_min :0.0valid_max :999999.0comment :Effective number of independent looks taken to form the rare interferogram.[6842667 values with dtype=float32]height(points)float32...long_name :height above reference ellipsoidunits :mquality_flag :geolocation_qualvalid_min :-1500.0valid_max :15000.0comment :Height of the pixel above the reference ellipsoid.[6842667 values with dtype=float32]cross_track(points)float32...long_name :approximate cross-track locationunits :mquality_flag :geolocation_qualvalid_min :-75000.0valid_max :75000.0comment :Approximate cross-track location of the pixel.[6842667 values with dtype=float32]pixel_area(points)float32...long_name :pixel areaunits :m^2quality_flag :geolocation_qualvalid_min :0.0valid_max :999999.0comment :Pixel area.[6842667 values with dtype=float32]inc(points)float32...long_name :incidence angleunits :degreesquality_flag :geolocation_qualvalid_min :0.0valid_max :999999.0comment :Incidence angle.[6842667 values with dtype=float32]phase_noise_std(points)float32...long_name :phase noise standard deviationunits :radiansvalid_min :-999999.0valid_max :999999.0comment :Estimate of the phase noise standard deviation.[6842667 values with dtype=float32]dlatitude_dphase(points)float32...long_name :sensitivity of latitude estimate to interferogram phaseunits :degrees/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the latitude estimate to the interferogram phase.[6842667 values with dtype=float32]dlongitude_dphase(points)float32...long_name :sensitivity of longitude estimate to interferogram phaseunits :degrees/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the longitude estimate to the interferogram phase.[6842667 values with dtype=float32]dheight_dphase(points)float32...long_name :sensitivity of height estimate to interferogram phaseunits :m/radianquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the interferogram phase.[6842667 values with dtype=float32]dheight_droll(points)float32...long_name :sensitivity of height estimate to spacecraft rollunits :m/degreesquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the spacecraft roll.[6842667 values with dtype=float32]dheight_dbaseline(points)float32...long_name :sensitivity of height estimate to interferometric baselineunits :m/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the interferometric baseline.[6842667 values with dtype=float32]dheight_drange(points)float32...long_name :sensitivity of height estimate to range (delay)units :m/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the height estimate to the range (delay).[6842667 values with dtype=float32]darea_dheight(points)float32...long_name :sensitivity of pixel area to reference heightunits :m^2/mquality_flag :geolocation_qualvalid_min :-999999.0valid_max :999999.0comment :Sensitivity of the pixel area to the reference height.[6842667 values with dtype=float32]illumination_time(points)datetime64[ns]...long_name :time of illumination of each pixel (UTC)standard_name :timetai_utc_difference :37.0leap_second :0000-00-00T00:00:00Zcomment :Time of measurement in seconds in the UTC time scale since 1 Jan 2000 00:00:00 UTC. [tai_utc_difference] is the difference between TAI and UTC reference time (seconds) for the first measurement of the data set. If a leap second occurs within the data set, the attribute leap_second is set to the UTC time at which the leap second occurs.[6842667 values with dtype=datetime64[ns]]illumination_time_tai(points)datetime64[ns]...long_name :time of illumination of each pixel (TAI)standard_name :timecomment :Time of measurement in seconds in the TAI time scale since 1 Jan 2000 00:00:00 TAI. This time scale contains no leap seconds. The difference (in seconds) with time in UTC is given by the attribute [illumination_time:tai_utc_difference].[6842667 values with dtype=datetime64[ns]]eff_num_medium_looks(points)float32...long_name :effective number of medium looksunits :1valid_min :0.0valid_max :999999.0comment :Effective number of independent looks taken in forming the medium interferogram (after adaptive averaging).[6842667 values with dtype=float32]sig0(points)float32...long_name :sigma0units :1quality_flag :sig0_qualvalid_min :-999999.0valid_max :999999.0comment :Normalized radar cross section (sigma0) in real, linear units (not decibels). The value may be negative due to noise subtraction.[6842667 values with dtype=float32]sig0_uncert(points)float32...long_name :sigma0 uncertaintyunits :1valid_min :-999999.0valid_max :999999.0comment :1-sigma uncertainty in the sig0 measurement.  The value is given as an additive (not multiplicative) linear term (not a term in decibels).[6842667 values with dtype=float32]phase_unwrapping_region(points)float64...long_name :phase unwrapping region indexunits :1valid_min :-1valid_max :99999999comment :Phase unwrapping region index.[6842667 values with dtype=float64]ambiguity_cost1(points)float32...long_name :phase ambiguity minimum costunits :1valid_min :-999999.0valid_max :999999.0comment :Phase ambiguity minimum cost.[6842667 values with dtype=float32]ambiguity_cost2(points)float32...long_name :phase ambiguity 2nd minimum costunits :1valid_min :-999999.0valid_max :999999.0comment :Phase ambiguity 2nd minimum cost.[6842667 values with dtype=float32]instrument_range_cor(points)float32...long_name :instrument range correctionunits :mvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to range before geolocation.[6842667 values with dtype=float32]instrument_phase_cor(points)float32...long_name :instrument phase correctionunits :radiansvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to phase before geolocation.[6842667 values with dtype=float32]instrument_baseline_cor(points)float32...long_name :instrument baseline correctionunits :mvalid_min :-999999.0valid_max :999999.0comment :Term that incorporates all calibration corrections applied to baseline before geolocation.[6842667 values with dtype=float32]sig0_cor_atmos_model(points)float32...long_name :two-way atmospheric correction to sigma0 from modelsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :1valid_min :1.0valid_max :10.0comment :Atmospheric correction to sigma0 from weather model data as a linear power multiplier (not decibels). sig0_cor_atmos_model is already applied in computing sig0 and x_factor_plus_y and x_factor_minus_y.[6842667 values with dtype=float32]height_cor_xover(points)float32...long_name :height correction from KaRIn crossoversunits :mvalid_min :-10.0valid_max :10.0comment :Height correction from KaRIn crossover calibration. The correction is applied before geolocation but reported as an equivalent height correction.[6842667 values with dtype=float32]model_dry_tropo_cor(points)float32...long_name :dry troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :mvalid_min :-3.0valid_max :-1.5comment :Equivalent vertical correction due to dry troposphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]model_wet_tropo_cor(points)float32...long_name :wet troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFunits :mvalid_min :-1.0valid_max :0.0comment :Equivalent vertical correction due to wet troposphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]iono_cor_gim_ka(points)float32...long_name :ionosphere vertical correctionsource :Global Ionosphere Mapsinstitution :JPLunits :mvalid_min :-0.5valid_max :0.0comment :Equivalent vertical correction due to ionosphere delay. The reported pixel height, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported pixel height results in the uncorrected pixel height.[6842667 values with dtype=float32]geoid(points)float32...long_name :geoid heightstandard_name :geoid_height_above_reference_ellipsoidsource :EGM2008 (Pavlis et al., 2012)units :mvalid_min :-150.0valid_max :150.0comment :Geoid height above the reference ellipsoid with a correction to refer the value to the mean tide system, i.e. includes the permanent tide (zero frequency).  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]solid_earth_tide(points)float32...long_name :solid Earth tide heightsource :Cartwright and Taylor (1971) and Cartwright and Edden (1973)units :mvalid_min :-1.0valid_max :1.0comment :Solid-Earth (body) tide height. The zero-frequency permanent tide component is not included.  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]load_tide_fes(points)float32...long_name :geocentric load tide height (FES)source :FES2014b (Carrere et al., 2016)institution :LEGOS/CNESunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth's crust. This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]load_tide_got(points)float32...long_name :geocentric load tide height (GOT)source :GOT4.10c (Ray, 2013)institution :GSFCunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth's crust. This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]pole_tide(points)float32...long_name :geocentric pole tide heightsource :Wahr (1985) and Desai et al. (2015)units :mvalid_min :-0.2valid_max :0.2comment :Geocentric pole tide height. The total of the contribution from the solid-Earth (body) pole tide height and the load pole tide height (i.e., the effect of the ocean pole tide loading of the Earth's crust).  This value is reported for reference but is not applied to the reported height.[6842667 values with dtype=float32]ancillary_surface_classification_flag(points)float32...long_name :surface classificationstandard_name :status_flagsource :MODIS/GlobCoverinstitution :European Space Agencyflag_meanings :open_ocean land continental_water aquatic_vegetation continental_ice_snow floating_ice salted_basinflag_values :[0 1 2 3 4 5 6]valid_min :0valid_max :6comment :7-state surface type classification computed from a mask built with MODIS and GlobCover data.[6842667 values with dtype=float32]interferogram_qual(points)float64...standard_name :status_flagflag_meanings :rare_power_suspect rare_phase_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded rare_power_bad rare_phase_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[      2048       4096       8192      16384      32768     262144\n     524288  134217728  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4161599488comment :Quality flag for the interferogram quantities in the pixel cloud data[6842667 values with dtype=float64]classification_qual(points)float64...standard_name :status_flagflag_meanings :no_coherent_gain power_close_to_noise_floor detected_water_but_no_prior_water detected_water_but_bright_land water_false_detection_rate_suspect coherent_power_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded coherent_power_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8         16       2048\n       8192      16384      32768     262144     524288  134217728\n  536870912 1073741824 2147483648]valid_min :0valid_max :3893159967comment :Quality flag for the classification quantities in the pixel cloud data[6842667 values with dtype=float64]geolocation_qual(points)float64...standard_name :status_flagflag_meanings :layover_significant phase_noise_suspect phase_unwrapping_suspect model_dry_tropo_cor_suspect model_wet_tropo_cor_suspect iono_cor_gim_ka_suspect xovercal_suspect medium_phase_suspect tvp_suspect sc_event_suspect small_karin_gap specular_ringing_degraded model_dry_tropo_cor_missing model_wet_tropo_cor_missing iono_cor_gim_ka_missing xovercal_missing geolocation_is_from_refloc no_geolocation_bad medium_phase_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8         16         32\n         64       4096       8192      16384      32768     524288\n    1048576    2097152    4194304    8388608   16777216  134217728\n  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4193841279comment :Quality flag for the geolocation quantities in the pixel cloud data[6842667 values with dtype=float64]sig0_qual(points)float64...standard_name :status_flagflag_meanings :sig0_uncert_suspect sig0_cor_atmos_suspect noise_power_suspect xfactor_suspect rare_power_suspect tvp_suspect sc_event_suspect small_karin_gap in_air_pixel_degraded specular_ringing_degraded sig0_cor_atmos_missing noise_power_bad xfactor_bad rare_power_bad tvp_bad sc_event_bad large_karin_gapflag_masks :[         1          2          4          8       2048       8192\n      16384      32768     262144     524288    1048576   33554432\n   67108864  134217728  536870912 1073741824 2147483648]valid_min :0valid_max :3994871823comment :Quality flag for sig0[6842667 values with dtype=float64]pixc_line_qual(num_pixc_lines)float64...standard_name :status_flagflag_meanings :not_in_tile tvp_suspect sc_event_suspect small_karin_gap tvp_bad sc_event_bad large_karin_gapflag_masks :[         1       8192      16384      32768  536870912 1073741824\n 2147483649]valid_min :0valid_max :3758153729comment :Quality flag for pixel cloud data per rare-posted interferogram line (similar to slc_qual in the L1B_HR_SLC product)[3249 values with dtype=float64]pixc_line_to_tvp(num_pixc_lines)float32...long_name :pixel cloud rare line to tvp indexunits :1valid_min :0.0valid_max :999999.0comment :Pixel cloud rare radar grid line index to tvp index mapping[3249 values with dtype=float32]Indexes: (0)Attributes: (6)description :cloud of geolocated interferogram pixelsinterferogram_size_azimuth :3249interferogram_size_range :4758looks_to_efflooks :1.5368636877472777num_azimuth_looks :7.0azimuth_offset :8\n\n\n\n\n\n\n# This could take a few minutes to plot\nplt.scatter(x=ds_PIXC.longitude, y=ds_PIXC.latitude, c=ds_PIXC.height)\nplt.colorbar().set_label('Height (m)')\n\n\n\n\n\n\n\n\n\n# plt.scatter(x=ds_PIXC.longitude, y=ds_PIXC.latitude, c=ds_PIXC.classification)\n# plt.colorbar().set_label('Classification')\n\n\n\n\n\n\n\n\npixcvec_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_PIXCVEC_1.1', \n                                          temporal = ('2023-04-08 00:00:00', '2023-04-22 23:59:59'), \n                                          granule_name = '*_498_024_101L*')\n                                          # granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013 \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=pixcvec_results)\n\n# get link for file 0\npixcvec_link = earthaccess.results.DataGranule.data_links(pixcvec_results[0], access='direct')[0]\n\ns3_file_obj4 = fs_s3.open(pixcvec_link, mode='rb')\n\n\n\n\n\nds_PIXCVEC = xr.open_dataset(s3_file_obj4, decode_cf=False,  engine='h5netcdf')\nds_PIXCVEC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:               (points: 6842667, nchar_reach_id: 11,\n                           nchar_node_id: 14, nchar_lake_id: 10,\n                           nchar_obs_id: 13)\nDimensions without coordinates: points, nchar_reach_id, nchar_node_id,\n                                nchar_lake_id, nchar_obs_id\nData variables:\n    azimuth_index         (points) int32 ...\n    range_index           (points) int32 ...\n    latitude_vectorproc   (points) float64 ...\n    longitude_vectorproc  (points) float64 ...\n    height_vectorproc     (points) float32 ...\n    reach_id              (points, nchar_reach_id) |S1 ...\n    node_id               (points, nchar_node_id) |S1 ...\n    lake_id               (points, nchar_lake_id) |S1 ...\n    obs_id                (points, nchar_obs_id) |S1 ...\n    ice_clim_f            (points) int8 ...\n    ice_dyn_f             (points) int8 ...\nAttributes: (12/45)\n    Conventions:                     CF-1.7\n    title:                           Level 2 KaRIn high rate pixel cloud vect...\n    short_name:                      L2_HR_PIXCVec\n    institution:                     JPL\n    source:                          Level 1B KaRIn High Rate Single Look Com...\n    history:                         2023-10-03T00:34:10.665297Z: Creation\n    ...                              ...\n    xref_prior_river_db_file:        \n    xref_prior_lake_db_file:         SWOT_LakeDatabase_Cal_024_20000101T00000...\n    xref_reforbittrack_files:        SWOT_RefOrbitTrackTileBoundary_Cal_20000...\n    xref_param_l2_hr_laketile_file:  SWOT_Param_L2_HR_LakeTile_20000101T00000...\n    ellipsoid_semi_major_axis:       6378137.0\n    ellipsoid_flattening:            0.0033528106647474805xarray.DatasetDimensions:points: 6842667nchar_reach_id: 11nchar_node_id: 14nchar_lake_id: 10nchar_obs_id: 13Coordinates: (0)Data variables: (11)azimuth_index(points)int32..._FillValue :2147483647long_name :rare interferogram azimuth indexunits :1valid_min :0valid_max :999999coordinates :longitude_vectorproc latitude_vectorproccomment :Rare interferogram azimuth index (indexed from 0).[6842667 values with dtype=int32]range_index(points)int32..._FillValue :2147483647long_name :rare interferogram range indexunits :1valid_min :0valid_max :999999coordinates :longitude_vectorproc latitude_vectorproccomment :Rare interferogram range index (indexed from 0).[6842667 values with dtype=int32]latitude_vectorproc(points)float64..._FillValue :9.969209968386869e+36long_name :height-constrained geolocation latitudestandard_name :latitudeunits :degrees_northvalid_min :-80.0valid_max :80.0comment :Height-constrained geodetic latitude of the pixel. Units are in degrees north of the equator.[6842667 values with dtype=float64]longitude_vectorproc(points)float64..._FillValue :9.969209968386869e+36long_name :height-constrained geolocation longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :Height-constrained geodetic longitude of the pixel. Positive=degrees east of the Greenwich meridian. Negative=degrees west of the Greenwich meridian.[6842667 values with dtype=float64]height_vectorproc(points)float32..._FillValue :9.96921e+36long_name :height above reference ellipsoidunits :mvalid_min :-1500.0valid_max :15000.0coordinates :longitude_vectorproc latitude_vectorproccomment :Height-constrained height of the pixel above the reference ellipsoid.[6842667 values with dtype=float32]reach_id(points, nchar_reach_id)|S1...long_name :identifier of the associated prior river reachcoordinates :longitude_vectorproc latitude_vectorproccomment :Unique reach identifier from the prior river database. The format of the identifier is CBBBBBRRRRT, where C=continent, B=basin, R=reach, T=type.[75269337 values with dtype=|S1]node_id(points, nchar_node_id)|S1...long_name :identifier of the associated prior river nodecoordinates :longitude_vectorproc latitude_vectorproccomment :Unique node identifier from the prior river database. The format of the identifier is CBBBBBRRRRNNNT, where C=continent, B=basin, R=reach, N=node, T=type of water body.[95797338 values with dtype=|S1]lake_id(points, nchar_lake_id)|S1...long_name :identifier of the associated prior lakecoordinates :longitude_vectorproc latitude_vectorproccomment :Identifier of the lake from the lake prior database) associated to the pixel. The format of the identifier is CBBNNNNNNT, where C=continent, B=basin, N=counter within the basin, T=type of water body.[68426670 values with dtype=|S1]obs_id(points, nchar_obs_id)|S1...long_name :identifier of the observed featurecoordinates :longitude_vectorproc latitude_vectorproccomment :Tile-specific identifier of the observed feature associated to the pixel. The format of the identifier is CBBTTTSNNNNNN, where C=continent, B=basin, T=tile number, S=swath side, N=lake counter within the PIXC tile.[88954671 values with dtype=|S1]ice_clim_f(points)int8..._FillValue :127long_name :climatological ice cover flagflag_meanings :no_ice_cover uncertain_ice_cover full_ice_coverflag_values :[0 1 2]institution :University of North Carolinacoordinates :longitude_vectorproc latitude_vectorproccomment :Climatological ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on external climatological information (not the SWOT measurement). Values of 0, 1, and 2 indicate that the surface is not ice covered, may or may not be partially or fully ice covered, and fully ice covered, respectively. A value of 127 indicates that this flag is not available.[6842667 values with dtype=int8]ice_dyn_f(points)int8..._FillValue :127long_name :dynamical ice cover flagflag_meanings :no_ice_cover partial_ice_cover full_ice_coverflag_values :[0 1 2]institution :University of North Carolinacoordinates :longitude_vectorproc latitude_vectorproccomment :Dynamic ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on analysis of external satellite optical data. Values of 0, 1, and 2 indicate that the surface is not ice covered, partially ice covered, and fully ice covered, respectively. A value of 255 indicates that this flag is not available.[6842667 values with dtype=int8]Indexes: (0)Attributes: (45)Conventions :CF-1.7title :Level 2 KaRIn high rate pixel cloud vector attribute productshort_name :L2_HR_PIXCVecinstitution :JPLsource :Level 1B KaRIn High Rate Single Look Complex Data Producthistory :2023-10-03T00:34:10.665297Z: Creationplatform :SWOTreferences :SWOT-DD-CDM-0565-CNES_SAS_Design_L2_HR_LakeSP - Revision A - 20220531reference_document :SWOT-TN-CDM-0677-CNES_Product_Description_L2_HR_PIXCVec - Revision A - 20220531product_version :V5.2.0crid :PIB0pge_name :PGE_L2_HR_LakeSPpge_version :V4.2.0contact :SWOT-contact@cnes.frcycle_number :498pass_number :24tile_number :101swath_side :Ltile_name :024_101Lcontinent_id :NAcontinent_code :7time_granule_start :2023-04-22T14:08:59.777643Ztime_granule_end :2023-04-22T14:09:10.791471Ztime_coverage_start :2023-04-22T14:09:00.319545Ztime_coverage_end :2023-04-22T14:09:10.241821Zgeospatial_lon_min :-98.50412772789815geospatial_lon_max :-97.68274315266319geospatial_lat_min :30.225915614959504geospatial_lat_max :30.963393644220716inner_first_longitude :-98.50412772789815inner_first_latitude :30.851058225779166inner_last_longitude :-98.34293396836563inner_last_latitude :30.225915614959504outer_first_longitude :-97.82378265890407outer_first_latitude :30.963393644220716outer_last_longitude :-97.68274315266319outer_last_latitude :30.334391846701063xref_l2_hr_pixc_file :SWOT_L2_HR_PIXC_498_024_101L_20230422T140859_20230422T140910_PIB0_01.ncxref_l2_hr_pixcvecriver_file :SWOT_L2_HR_PIXCVecRiver_498_024_101L_20230422T140859_20230422T140910_PIB0_01.ncxref_prior_river_db_file :xref_prior_lake_db_file :SWOT_LakeDatabase_Cal_024_20000101T000000_20991231T235959_20230614T000000_v102.sqlitexref_reforbittrack_files :SWOT_RefOrbitTrackTileBoundary_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txtxref_param_l2_hr_laketile_file :SWOT_Param_L2_HR_LakeTile_20000101T000000_20991231T235959_20230614T170000_v410.cfgellipsoid_semi_major_axis :6378137.0ellipsoid_flattening :0.0033528106647474805\n\n\n\n\n\n\npixcvec_htvals = ds_PIXCVEC.height_vectorproc.compute()\npixcvec_latvals = ds_PIXCVEC.latitude_vectorproc.compute()\npixcvec_lonvals = ds_PIXCVEC.longitude_vectorproc.compute()\n\n#Before plotting, we set all fill values to nan so that the graph shows up better spatially\npixcvec_htvals[pixcvec_htvals &gt; 15000] = np.nan\npixcvec_latvals[pixcvec_latvals &lt; 1] = np.nan\npixcvec_lonvals[pixcvec_lonvals &gt; -1] = np.nan\n\n\nplt.scatter(x=pixcvec_lonvals, y=pixcvec_latvals, c=pixcvec_htvals)\nplt.colorbar().set_label('Height (m)')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\n#Say we know the exact cycle, pass & scene. We can search for one data granule!\nraster_results = earthaccess.search_data(short_name = 'SWOT_L2_HR_Raster_1.1', \n                                         temporal = ('2023-04-01 00:00:00', '2023-04-22 23:59:59'), \n                                         granule_name = '*100m*_498_024_051F*')\n                                         # granule_name = '*100m*_498_013_130F*') # here we filter by files with '100m' in the name (This collection has two resolution options: 100m & 250m), cycle=498, pass=013, scene = 130F \n\nGranules found: 1\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=raster_results)\n\n# get link for file \nraster_link = earthaccess.results.DataGranule.data_links(raster_results[0], access='direct')[0]\n\ns3_file_obj5 = fs_s3.open(raster_link, mode='rb')\n\n\n\n\n\nds_raster = xr.open_dataset(s3_file_obj5, engine='h5netcdf')\nds_raster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                  (x: 1505, y: 1505)\nCoordinates:\n  * x                        (x) float64 4.855e+05 4.856e+05 ... 6.359e+05\n  * y                        (y) float64 3.272e+06 3.272e+06 ... 3.422e+06\nData variables: (12/39)\n    crs                      object ...\n    longitude                (y, x) float64 ...\n    latitude                 (y, x) float64 ...\n    wse                      (y, x) float32 ...\n    wse_qual                 (y, x) float32 ...\n    wse_qual_bitwise         (y, x) float64 ...\n    ...                       ...\n    load_tide_fes            (y, x) float32 ...\n    load_tide_got            (y, x) float32 ...\n    pole_tide                (y, x) float32 ...\n    model_dry_tropo_cor      (y, x) float32 ...\n    model_wet_tropo_cor      (y, x) float32 ...\n    iono_cor_gim_ka          (y, x) float32 ...\nAttributes: (12/49)\n    Conventions:                   CF-1.7\n    title:                         Level 2 KaRIn High Rate Raster Data Product\n    source:                        Ka-band radar interferometer\n    history:                       2023-10-04T10:18:05Z : Creation\n    platform:                      SWOT\n    reference_document:            JPL D-56416 - Revision B - October 24, 2022\n    ...                            ...\n    x_max:                         635900.0\n    y_min:                         3271900.0\n    y_max:                         3422300.0\n    institution:                   JPL\n    references:                    V1.0\n    product_version:               01xarray.DatasetDimensions:x: 1505y: 1505Coordinates: (2)x(x)float644.855e+05 4.856e+05 ... 6.359e+05long_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :mvalid_min :-10000000.0valid_max :10000000.0comment :UTM easting coordinate of the pixel.array([485500., 485600., 485700., ..., 635700., 635800., 635900.])y(y)float643.272e+06 3.272e+06 ... 3.422e+06long_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :mvalid_min :-20000000.0valid_max :20000000.0comment :UTM northing coordinate of the pixel.array([3271900., 3272000., 3272100., ..., 3422100., 3422200., 3422300.])Data variables: (39)crs()object...long_name :CRS Definitiongrid_mapping_name :transverse_mercatorprojected_crs_name :WGS 84 / UTM zone 14Ngeographic_crs_name :WGS 84reference_ellipsoid_name :WGS 84horizontal_datum_name :WGS_1984prime_meridian_name :Greenwichfalse_easting :500000.0false_northing :0.0longitude_of_central_meridian :-99.0longitude_of_prime_meridian :0.0latitude_of_projection_origin :0.0scale_factor_at_central_meridian :0.9996semi_major_axis :6378137.0inverse_flattening :298.257223563crs_wkt :PROJCS[\"WGS 84 / UTM zone 14N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-99],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32614\"]]spatial_ref :PROJCS[\"WGS 84 / UTM zone 14N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-99],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32614\"]]comment :UTM zone coordinate reference system.[1 values with dtype=object]longitude(y, x)float64...long_name :longitude (degrees East)standard_name :longitudegrid_mapping :crsunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :Geodetic longitude [-180,180) (east of the Greenwich meridian) of the pixel.[2265025 values with dtype=float64]latitude(y, x)float64...long_name :latitude (positive N, negative S)standard_name :latitudegrid_mapping :crsunits :degrees_northvalid_min :-80.0valid_max :80.0comment :Geodetic latitude [-80,80] (degrees north of equator) of the pixel.[2265025 values with dtype=float64]wse(y, x)float32...long_name :water surface elevation above geoidgrid_mapping :crsunits :mquality_flag :wse_qualvalid_min :-1500.0valid_max :15000.0comment :Water surface elevation of the pixel above the geoid and after using models to subtract the effects of tides (solid_earth_tide, load_tide_fes, pole_tide).[2265025 values with dtype=float32]wse_qual(y, x)float32...long_name :summary quality indicator for the water surface elevationstandard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the water surface elevation quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]wse_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the water surface elevationstandard_name :status_flaggrid_mapping :crsflag_meanings :classification_qual_suspect geolocation_qual_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         2          4         32        128       4096       8192\n      16384     262144     524288   16777216  268435456  536870912\n 1073741824 2147483648]valid_min :0valid_max :4044124326comment :Bitwise quality indicator for the water surface elevation quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]wse_uncert(y, x)float32...long_name :uncertainty in the water surface elevationgrid_mapping :crsunits :mvalid_min :0.0valid_max :999999.0comment :1-sigma uncertainty in the water surface elevation.[2265025 values with dtype=float32]water_area(y, x)float32...long_name :water surface areagrid_mapping :crsunits :m^2quality_flag :water_area_qualvalid_min :-2000000.0valid_max :2000000000.0comment :Surface area of the water pixels.[2265025 values with dtype=float32]water_area_qual(y, x)float32...long_name :summary quality indicator for the water surface areastandard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the water surface area and water fraction quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]water_area_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the water surface areastandard_name :status_flaggrid_mapping :crsflag_meanings :classification_qual_suspect geolocation_qual_suspect water_fraction_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         2          4          8         32        128       4096\n       8192      16384     262144     524288   16777216  268435456\n  536870912 1073741824 2147483648]valid_min :0valid_max :4044124334comment :Bitwise quality indicator for the water surface area and water fraction quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]water_area_uncert(y, x)float32...long_name :uncertainty in the water surface areagrid_mapping :crsunits :m^2valid_min :0.0valid_max :2000000000.0comment :1-sigma uncertainty in the water surface area.[2265025 values with dtype=float32]water_frac(y, x)float32...long_name :water fractiongrid_mapping :crsunits :1quality_flag :water_area_qualvalid_min :-1000.0valid_max :10000.0comment :Fraction of the pixel that is water.[2265025 values with dtype=float32]water_frac_uncert(y, x)float32...long_name :uncertainty in the water fractiongrid_mapping :crsunits :1valid_min :0.0valid_max :999999.0comment :1-sigma uncertainty in the water fraction.[2265025 values with dtype=float32]sig0(y, x)float32...long_name :sigma0grid_mapping :crsunits :1quality_flag :sig0_qualvalid_min :-1000.0valid_max :10000000.0comment :Normalized radar cross section (sigma0) in real, linear units (not decibels). The value may be negative due to noise subtraction.[2265025 values with dtype=float32]sig0_qual(y, x)float32...long_name :summary quality indicator for the sigma0standard_name :status_flaggrid_mapping :crsflag_meanings :good suspect degraded badflag_values :[0 1 2 3]valid_min :0valid_max :3comment :Summary quality indicator for the sigma0 quantities. A value of 0 indicates a nominal measurement, 1 indicates a suspect measurement, 2 indicates a degraded measurement, and 3 indicates a bad measurement.[2265025 values with dtype=float32]sig0_qual_bitwise(y, x)float64...long_name :bitwise quality indicator for the sigma0standard_name :status_flaggrid_mapping :crsflag_meanings :sig0_qual_suspect classification_qual_suspect geolocation_qual_suspect large_uncert_suspect bright_land few_pixels far_range_suspect near_range_suspect sig0_qual_degraded classification_qual_degraded geolocation_qual_degraded value_bad no_pixels outside_scene_bounds inner_swath missing_karin_dataflag_masks :[         1          2          4         32        128       4096\n       8192      16384     131072     262144     524288   16777216\n  268435456  536870912 1073741824 2147483648]valid_min :0valid_max :4044255399comment :Bitwise quality indicator for the sigma0 quantities. If this word is interpreted as an unsigned integer, a value of 0 indicates good data, positive values less than 32768 represent suspect data, values greater than or equal to 32768 but less than 8388608 represent degraded data, and values greater than or equal to 8388608 represent bad data.[2265025 values with dtype=float64]sig0_uncert(y, x)float32...long_name :uncertainty in sigma0grid_mapping :crsunits :1valid_min :0.0valid_max :1000.0comment :1-sigma uncertainty in sigma0. The value is provided in linear units. This value is a one-sigma additive (not multiplicative) uncertainty term, which can be added to or subtracted from sigma0.[2265025 values with dtype=float32]inc(y, x)float32...long_name :incidence anglegrid_mapping :crsunits :degreesvalid_min :0.0valid_max :90.0comment :Incidence angle.[2265025 values with dtype=float32]cross_track(y, x)float32...long_name :approximate cross-track locationgrid_mapping :crsunits :mvalid_min :-75000.0valid_max :75000.0comment :Approximate cross-track location of the pixel.[2265025 values with dtype=float32]illumination_time(y, x)datetime64[ns]...long_name :time of illumination of each pixel (UTC)standard_name :timetai_utc_difference :37.0leap_second :0000-00-00T00:00:00Zcomment :Time of measurement in seconds in the UTC time scale since 1 Jan 2000 00:00:00 UTC. [tai_utc_difference] is the difference between TAI and UTC reference time (seconds) for the first measurement of the data set. If a leap second occurs within the data set, the attribute leap_second is set to the UTC time at which the leap second occurs.[2265025 values with dtype=datetime64[ns]]illumination_time_tai(y, x)datetime64[ns]...long_name :time of illumination of each pixel (TAI)standard_name :timecomment :Time of measurement in seconds in the TAI time scale since 1 Jan 2000 00:00:00 TAI. This time scale contains no leap seconds. The difference (in seconds) with time in UTC is given by the attribute [illumination_time:tai_utc_difference].[2265025 values with dtype=datetime64[ns]]n_wse_pix(y, x)float64...long_name :number of water surface elevation pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in water surface elevation aggregation.[2265025 values with dtype=float64]n_water_area_pix(y, x)float64...long_name :number of water surface area pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in water surface area and water fraction aggregation.[2265025 values with dtype=float64]n_sig0_pix(y, x)float64...long_name :number of sigma0 pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in sigma0 aggregation.[2265025 values with dtype=float64]n_other_pix(y, x)float64...long_name :number of other pixelsgrid_mapping :crsunits :lvalid_min :0valid_max :999999comment :Number of pixel cloud samples used in aggregation of quantities not related to water surface elevation, water surface area, water fraction or sigma0.[2265025 values with dtype=float64]dark_frac(y, x)float32...long_name :fractional area of dark watergrid_mapping :crsunits :lvalid_min :-1000.0valid_max :10000.0comment :Fraction of pixel water surface area covered by dark water.[2265025 values with dtype=float32]ice_clim_flag(y, x)float32...long_name :climatological ice cover flagstandard_name :status_flagsource :UNCgrid_mapping :crsflag_meanings :no_ice_cover uncertain_ice_cover full_ice_coverflag_values :[0 1 2]valid_min :0valid_max :2comment :Climatological ice cover flag indicating whether the pixel is ice-covered on the day of the observation based on external climatological information (not the SWOT measurement). Values of 0, 1, and 2 indicate that the pixel is likely not ice covered, may or may not be partially or fully ice covered, and likely fully ice covered, respectively.[2265025 values with dtype=float32]ice_dyn_flag(y, x)float32...long_name :dynamic ice cover flagstandard_name :status_flagsource :UNCgrid_mapping :crsflag_meanings :no_ice_cover partial_ice_cover full_ice_coverflag_values :[0 1 2]valid_min :0valid_max :2comment :Dynamic ice cover flag indicating whether the surface is ice-covered on the day of the observation based on analysis of external satellite optical data.  Values of 0, 1, and 2 indicate that the pixel is not ice covered, partially ice covered, and fully ice covered, respectively.[2265025 values with dtype=float32]layover_impact(y, x)float32...long_name :layover impactgrid_mapping :crsunits :mvalid_min :-999999.0valid_max :999999.0comment :Estimate of the water surface elevation error caused by layover.[2265025 values with dtype=float32]sig0_cor_atmos_model(y, x)float32...long_name :two-way atmospheric correction to sigma0 from modelsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :1valid_min :1.0valid_max :10.0comment :Atmospheric correction to sigma0 from weather model data as a linear power multiplier (not decibels). sig0_cor_atmos_model is already applied in computing sig0.[2265025 values with dtype=float32]height_cor_xover(y, x)float32...long_name :height correction from KaRIn crossoversgrid_mapping :crsunits :mvalid_min :-10.0valid_max :10.0comment :Height correction from KaRIn crossover calibration. The correction is applied before geolocation but reported as an equivalent height correction.[2265025 values with dtype=float32]geoid(y, x)float32...long_name :geoid heightstandard_name :geoid_height_above_reference_ellipsoidsource :EGM2008 (Pavlis et al., 2012)grid_mapping :crsunits :mvalid_min :-150.0valid_max :150.0comment :Geoid height above the reference ellipsoid with a correction to refer the value to the mean tide system, i.e. includes the permanent tide (zero frequency).[2265025 values with dtype=float32]solid_earth_tide(y, x)float32...long_name :solid Earth tide heightsource :Cartwright and Taylor (1971) and Cartwright and Edden (1973)grid_mapping :crsunits :mvalid_min :-1.0valid_max :1.0comment :Solid-Earth (body) tide height. The zero-frequency permanent tide component is not included.[2265025 values with dtype=float32]load_tide_fes(y, x)float32...long_name :geocentric load tide height (FES)source :FES2014b (Carrere et al., 2016)institution :LEGOS/CNESgrid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth’s crust.[2265025 values with dtype=float32]load_tide_got(y, x)float32...long_name :geocentric load tide height (GOT)source :GOT4.10c (Ray, 2013)institution :GSFCgrid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric load tide height. The effect of the ocean tide loading of the Earth’s crust. This value is reported for reference but is not applied to the reported height.[2265025 values with dtype=float32]pole_tide(y, x)float32...long_name :geocentric pole tide heightsource :Wahr (1985) and Desai et al. (2015)grid_mapping :crsunits :mvalid_min :-0.2valid_max :0.2comment :Geocentric pole tide height. The total of the contribution from the solid-Earth (body) pole tide height and the load pole tide height (i.e., the effect of the ocean pole tide loading of the Earth’s crust).[2265025 values with dtype=float32]model_dry_tropo_cor(y, x)float32...long_name :dry troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :mvalid_min :-3.0valid_max :-1.5comment :Equivalent vertical correction due to dry troposphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]model_wet_tropo_cor(y, x)float32...long_name :wet troposphere vertical correctionsource :European Centre for Medium-Range Weather Forecastsinstitution :ECMWFgrid_mapping :crsunits :mvalid_min :-1.0valid_max :0.0comment :Equivalent vertical correction due to wet troposphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]iono_cor_gim_ka(y, x)float32...long_name :ionosphere vertical correctionsource :Global Ionosphere Mapsinstitution :JPLgrid_mapping :crsunits :mvalid_min :-0.5valid_max :0.0comment :Equivalent vertical correction due to ionosphere delay. The reported water surface elevation, latitude and longitude are computed after adding negative media corrections to uncorrected range along slant-range paths, accounting for the differential delay between the two KaRIn antennas. The equivalent vertical correction is computed by applying obliquity factors to the slant-path correction. Adding the reported correction to the reported water surface elevation results in the uncorrected pixel height.[2265025 values with dtype=float32]Indexes: (2)xPandasIndexPandasIndex(Float64Index([485500.0, 485600.0, 485700.0, 485800.0, 485900.0, 486000.0,\n              486100.0, 486200.0, 486300.0, 486400.0,\n              ...\n              635000.0, 635100.0, 635200.0, 635300.0, 635400.0, 635500.0,\n              635600.0, 635700.0, 635800.0, 635900.0],\n             dtype='float64', name='x', length=1505))yPandasIndexPandasIndex(Float64Index([3271900.0, 3272000.0, 3272100.0, 3272200.0, 3272300.0, 3272400.0,\n              3272500.0, 3272600.0, 3272700.0, 3272800.0,\n              ...\n              3421400.0, 3421500.0, 3421600.0, 3421700.0, 3421800.0, 3421900.0,\n              3422000.0, 3422100.0, 3422200.0, 3422300.0],\n             dtype='float64', name='y', length=1505))Attributes: (49)Conventions :CF-1.7title :Level 2 KaRIn High Rate Raster Data Productsource :Ka-band radar interferometerhistory :2023-10-04T10:18:05Z : Creationplatform :SWOTreference_document :JPL D-56416 - Revision B - October 24, 2022contact :alexander.t.corben[at]jpl.nasa.govcycle_number :498pass_number :24scene_number :51tile_numbers :[100 101 102 103 100 101 102 103]tile_names :024_100L, 024_101L, 024_102L, 024_103L, 024_100R, 024_101R, 024_102R, 024_103Rtile_polarizations :H, H, H, H, V, V, V, Vcoordinate_reference_system :Universal Transverse Mercatorresolution :100.0short_name :L2_HR_Rasterdescriptor_string :100m_UTM14R_N_x_x_xcrid :PIB0pge_name :PGE_L2_HR_RASTERpge_version :4.3.1time_granule_start :2023-04-22T14:08:59.773882Ztime_granule_end :2023-04-22T14:09:20.715685Ztime_coverage_start :2023-04-22T14:09:00.310942Ztime_coverage_end :2023-04-22T14:09:20.176743Zgeospatial_lon_min :-99.15144259381215geospatial_lon_max :-97.59361273278951geospatial_lat_min :29.57685751046376geospatial_lat_max :30.929033865009067left_first_longitude :-97.83833737461467left_first_latitude :30.929033865009067left_last_longitude :-97.59361273278951left_last_latitude :29.793281951000594right_first_longitude :-99.15144259381215right_first_latitude :30.708483340005156right_last_longitude :-98.89264426789154right_last_latitude :29.57685751046376xref_l2_hr_pixc_files :SWOT_L2_HR_PIXC_498_024_100L_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_101L_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_102L_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_103L_20230422T140919_20230422T140930_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_100R_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_101R_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_102R_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXC_498_024_103R_20230422T140919_20230422T140930_PIB0_01.ncxref_l2_hr_pixcvec_files :SWOT_L2_HR_PIXCVec_498_024_100L_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_101L_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_102L_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_103L_20230422T140919_20230422T140930_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_100R_20230422T140849_20230422T140900_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_101R_20230422T140859_20230422T140910_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_102R_20230422T140909_20230422T140920_PIB0_01.nc, SWOT_L2_HR_PIXCVec_498_024_103R_20230422T140919_20230422T140930_PIB0_01.ncxref_param_l2_hr_raster_file :SWOT_Param_L2_HR_Raster_20000101T000000_21000101T000000_20230321T100000_v301.rdfxref_reforbittrack_files :SWOT_RefOrbitTrackTileBoundary_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txt, SWOT_RefOrbitTrack125mPass1_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txt, SWOT_RefOrbitTrack125mPass2_Cal_20000101T000000_21000101T000000_20200617T193054_v101.txtutm_zone_num :14mgrs_latitude_band :Rx_min :485500.0x_max :635900.0y_min :3271900.0y_max :3422300.0institution :JPLreferences :V1.0product_version :01\n\n\n\n\n\n\nds_raster.wse.hvplot.image(y='y', x='x')\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nFor additional tips on spatial searching of SWOT HR L2 data, see also PO.DAAC Cookbook - SWOT Chapter tips section.\n\nslc_results = earthaccess.search_data(short_name = 'SWOT_L1B_HR_SLC_1.1',\n                                       temporal = ('2023-04-22 00:00:00', '2023-04-22 23:59:59'), \n                                       granule_name = '*_498_013_*') # here we filter by cycle=498 and pass=013 with wildcards\n\nGranules found: 164\n\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the data access information.\n\nfs_s3 = earthaccess.get_s3fs_session(results=slc_results)\n\n# get link for file \nslc_link = earthaccess.results.DataGranule.data_links(slc_results[0], access='direct')[0]\n\ns3_file_obj6 = fs_s3.open(slc_link, mode='rb')\n\n\n\n\nThe L1B_HR_SLC product file contains five NetCDF data group called the slc, xfactor, noise, tvp, and grdem groups. More info can be found in the product description document within the dataset table for each group.\n\nds_SLC = xr.open_dataset(s3_file_obj6, group = 'slc', engine='h5netcdf')\nds_SLC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (num_lines: 17954, num_pixels: 4630, complex_depth: 2)\nDimensions without coordinates: num_lines, num_pixels, complex_depth\nData variables:\n    slc_plus_y   (num_lines, num_pixels, complex_depth) float32 ...\n    slc_minus_y  (num_lines, num_pixels, complex_depth) float32 ...\n    slc_qual     (num_lines) float32 ...\nAttributes:\n    description:  Single look complex images for plus_y and minus_y channelsxarray.DatasetDimensions:num_lines: 17954num_pixels: 4630complex_depth: 2Coordinates: (0)Data variables: (3)slc_plus_y(num_lines, num_pixels, complex_depth)float32...long_name :single look complex image for the plus_y channelunits :1valid_min :-1e+20valid_max :1e+20comment :SLC complex image for the plus_y channel (arbitrary scaling consistent with the X factor).[166254040 values with dtype=float32]slc_minus_y(num_lines, num_pixels, complex_depth)float32...long_name :single look complex image for the minus_y channelunits :1valid_min :-1e+20valid_max :1e+20comment :SLC complex image for the minus_y channel (arbitrary scaling consistent with the X factor).[166254040 values with dtype=float32]slc_qual(num_lines)float32...long_name :SLC quality flagstandard_name :status_flagflag_meanings :tvp_suspect sc_event_suspect small_karin_gap tvp_bad sc_event_bad large_karin_gapflag_masks :[  1   2   4  32  64 128]valid_min :0valid_max :231comment :Flag indicating conditions that may affect the quality of the SLC data.[17954 values with dtype=float32]Indexes: (0)Attributes: (1)description :Single look complex images for plus_y and minus_y channels",
    "crumbs": [
      "Tutorials",
      "Intro to HR Datasets"
    ]
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. Please remember your username and password!\n\n\n\nA GitHub account is required to gain access to the provided 2i2c cloud computing platform. Please visit https://github.com/join to register and create a free GitHub account. There was an opportunity to send in your GitHub username when you registered for the workshop, if you did not do so, please email cassandra.l.nickles@jpl.nasa.gov with your GitHub username and mention you are a participant for this workshop. If participants do not send their GitHub names, they will not be able to participate in the hands-on portion of the workshop in the cloud, but could follow along with the code rendered on this website.\nNote: you will receive an email from GitHub asking you to join the nasa-openscapes-workshops organization the morning of the workshop, please accept the invitation.\n\n\n\nParticipation in the exercises requires a laptop or tablet. Yes, a tablet works too! We have been notified there will not be power strips available in the venue, so please plan accordingly. The hands-on portion of the workshop lasts about an hour, so if battery life is a concern for the full workshop, please consider only using your laptop for the hands-on portion. All participants will have access in an internet browser to a cloud computing 2i2c Jupyter Lab instance running in AWS.",
    "crumbs": [
      "Prerequisites"
    ]
  },
  {
    "objectID": "prerequisites.html#before-the-workshop-you-will-need-the-following",
    "href": "prerequisites.html#before-the-workshop-you-will-need-the-following",
    "title": "Prerequisites",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. Please remember your username and password!\n\n\n\nA GitHub account is required to gain access to the provided 2i2c cloud computing platform. Please visit https://github.com/join to register and create a free GitHub account. There was an opportunity to send in your GitHub username when you registered for the workshop, if you did not do so, please email cassandra.l.nickles@jpl.nasa.gov with your GitHub username and mention you are a participant for this workshop. If participants do not send their GitHub names, they will not be able to participate in the hands-on portion of the workshop in the cloud, but could follow along with the code rendered on this website.\nNote: you will receive an email from GitHub asking you to join the nasa-openscapes-workshops organization the morning of the workshop, please accept the invitation.\n\n\n\nParticipation in the exercises requires a laptop or tablet. Yes, a tablet works too! We have been notified there will not be power strips available in the venue, so please plan accordingly. The hands-on portion of the workshop lasts about an hour, so if battery life is a concern for the full workshop, please consider only using your laptop for the hands-on portion. All participants will have access in an internet browser to a cloud computing 2i2c Jupyter Lab instance running in AWS.",
    "crumbs": [
      "Prerequisites"
    ]
  }
]